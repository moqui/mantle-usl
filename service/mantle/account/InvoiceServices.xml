<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- =========================================== -->
    <!-- ========== Invoice View Services ========== -->
    <!-- =========================================== -->

    <service verb="get" noun="InvoiceDisplayInfo">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="invoice" type="Map"/>
            <parameter name="editableStatusIds" type="Set"><parameter name="statusId"/></parameter>
            <parameter name="invoiceEditable" type="Boolean"/>
            <parameter name="recordPaymentStatusIds" type="Set"><parameter name="statusId"/></parameter>
            <parameter name="canRecordPayments" type="Boolean"/>

            <parameter name="isFromPartyOrgInternal" type="Boolean"><description>If true invoice is receivable</description></parameter>
            <parameter name="isToPartyOrgInternal" type="Boolean"><description>If true invoice is payable</description></parameter>
            <parameter name="dupInvoiceList" type="List"><description>List of invoices matching referenceNumber and
                other party (non org internal)</description><parameter name="dupInvoice" type="Map"/></parameter>

            <parameter name="invoiceTotal" type="BigDecimal"/>
            <parameter name="appliedPaymentsTotal" type="BigDecimal"/>
            <parameter name="unpaidTotal" type="BigDecimal"/>
            <parameter name="paymentApplicationList" type="List"><parameter name="paymentApplication" type="Map"/></parameter>
            <parameter name="unappliedPaymentInfoList" type="List"><parameter name="unappliedPaymentInfo" type="Map"/></parameter>
            <parameter name="statusHistoryList" type="List"><parameter name="auditLog" type="Map"/></parameter>

            <parameter name="orderItemBillingList" type="List"><parameter name="orderItemBilling" type="Map"/></parameter>
            <parameter name="orderIdSet" type="Set"><parameter name="orderId"/></parameter>
            <parameter name="orderPromisedPaymentList" type="List"><parameter name="orderPromisedPayment" type="Map"/></parameter>
            <parameter name="shipmentItemSourceList" type="List"><parameter name="shipmentItemSource" type="Map"/></parameter>
            <parameter name="shipmentIdSet" type="Set"><parameter name="shipmentId"/></parameter>

            <parameter name="acctgTransList" type="List"><parameter name="acctgTrans" type="Map"/></parameter>
            <parameter name="acctgTransIdSet" type="Set"><parameter name="acctgTransId"/></parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice == null"><return error="true" message="Invoice not found with ID ${invoiceId}"/></if>

            <!-- calc invoice totals -->
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="context"/>

            <set field="editableStatusIds" from="new HashSet(['InvoiceInProcess', 'InvoiceIncoming', 'InvoiceReceived'])"/>
            <set field="invoiceEditable" from="editableStatusIds.contains(invoice.statusId)"/>
            <set field="recordPaymentStatusIds" from="new HashSet(['InvoiceInProcess', 'InvoiceFinalized', 'InvoiceSent', 'InvoiceWriteOff', 'InvoiceReceived', 'InvoiceApproved'])"/>
            <set field="canRecordPayments" from="recordPaymentStatusIds.contains(invoice.statusId) &amp;&amp; unpaidTotal > 0.0"/>

            <!-- see if from/to parties are internal orgs -->
            <entity-find-count entity-name="mantle.party.PartyRole" count-field="fromOrgInternalCount">
                <econdition field-name="partyId" from="invoice.fromPartyId"/>
                <econdition field-name="roleTypeId" value="OrgInternal"/></entity-find-count>
            <set field="isFromPartyOrgInternal" from="fromOrgInternalCount &gt; 0"/>
            <entity-find-count entity-name="mantle.party.PartyRole" count-field="toOrgInternalCount">
                <econdition field-name="partyId" from="invoice.toPartyId"/>
                <econdition field-name="roleTypeId" value="OrgInternal"/></entity-find-count>
            <set field="isToPartyOrgInternal" from="toOrgInternalCount &gt; 0"/>

            <!-- look for duplicate invoices by referenceNumber -->
            <if condition="isFromPartyOrgInternal &amp;&amp; invoice.referenceNumber">
                <entity-find entity-name="mantle.account.invoice.Invoice" list="dupInvoiceList">
                    <econdition field-name="invoiceId" operator="not-equals"/>
                    <econdition field-name="toPartyId" from="invoice.toPartyId"/>
                    <econdition field-name="referenceNumber" from="invoice.referenceNumber"/>
                </entity-find>
            </if>
            <if condition="isToPartyOrgInternal &amp;&amp; invoice.referenceNumber">
                <entity-find entity-name="mantle.account.invoice.Invoice" list="dupInvoiceList">
                    <econdition field-name="invoiceId" operator="not-equals"/>
                    <econdition field-name="fromPartyId" from="invoice.fromPartyId"/>
                    <econdition field-name="referenceNumber" from="invoice.referenceNumber"/>
                </entity-find>
            </if>

            <!-- get payment applications -->
            <entity-find entity-name="mantle.account.payment.PaymentApplicationAndPayment" list="paymentApplicationList">
                <econdition field-name="invoiceId"/><order-by field-name="appliedDate"/></entity-find>
            <!-- get payments with reverse from/to parties that might be applied to this invoice -->
            <entity-find entity-name="mantle.account.payment.Payment" list="unappliedPaymentList">
                <econdition field-name="fromPartyId" from="invoice.toPartyId"/>
                <econdition field-name="toPartyId" from="invoice.fromPartyId"/>
                <econdition field-name="paymentTypeEnumId" operator="in" value="PtInvoicePayment,PtPrePayment"/>
                <econdition field-name="statusId" operator="in" value="PmntPromised,PmntAuthorized,PmntDelivered,PmntConfirmed"/>
                <econdition field-name="unappliedTotal" operator="greater" from="0.0"/>
            </entity-find>
            <set field="unappliedPaymentInfoList" from="[]"/>
            <iterate list="unappliedPaymentList" entry="unappliedPayment">
                <service-call name="mantle.account.PaymentServices.get#PaymentTotals" in-map="[paymentId:unappliedPayment.paymentId]" out-map="pmtTotal"/>
                <set field="maxApplicableAmount" from="unpaidTotal"/>
                <if condition="maxApplicableAmount > pmtTotal.unappliedTotal"><set field="maxApplicableAmount" from="pmtTotal.unappliedTotal"/></if>
                <script>unappliedPaymentInfoList.add(pmtTotal + [payment:unappliedPayment, maxApplicableAmount:maxApplicableAmount,
                        allowApply:(maxApplicableAmount &amp;&amp; unappliedPayment.statusId in ['PmntDelivered','PmntConfirmed'])])</script>
            </iterate>

            <!-- get status history -->
            <entity-find entity-name="moqui.entity.EntityAuditLog" list="statusHistoryList">
                <econdition field-name="changedEntityName" value="mantle.account.invoice.Invoice"/>
                <econdition field-name="changedFieldName" value="statusId"/>
                <econdition field-name="pkPrimaryValue" from="invoiceId"/>
                <order-by field-name="changedDate"/>
            </entity-find>

            <!-- get associated order items -->
            <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                <econdition field-name="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>
            <!-- extract related order IDs -->
            <set field="orderIdSet" from="new TreeSet(orderItemBillingList*.orderId)"/>
            <!-- get promised payments for associated orders -->
            <if condition="orderIdSet">
                <entity-find entity-name="mantle.account.payment.Payment" list="orderPromisedPaymentList">
                    <econdition field-name="orderId" operator="in" from="orderIdSet"/>
                    <econdition field-name="statusId" operator="in" value="PmntPromised,PmntAuthorized"/>
                </entity-find>
            </if>

            <!-- get associated shipment items -->
            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                <econdition field-name="invoiceId"/></entity-find>
            <set field="shipmentIdSet" from="new TreeSet(shipmentItemSourceList*.shipmentId)"/>

            <!-- get associated accounting transactions -->
            <entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="acctgTransList">
                <econdition field-name="invoiceId"/></entity-find>
            <set field="acctgTransIdSet" from="new TreeSet(acctgTransList*.acctgTransId)"/>
        </actions>
    </service>

    <service verb="get" noun="InvoiceTotal">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="invoiceTotal" type="BigDecimal"/>
            <parameter name="appliedPaymentsTotal" type="BigDecimal"/>
            <parameter name="unpaidTotal" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- NOTE: the approach used here is less efficient than letting the DB due the multiply/sum/etc or selecting only
                fields needed but is compatible with the TransactionCache -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/></entity-find>
            <set field="invoiceTotal" from="0.0"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="invoiceTotal" from="invoiceTotal + ((invoiceItem.quantity != null ? invoiceItem.quantity : 1.0) * (invoiceItem.amount ?: 0.0))"/></iterate>
            <!-- round total to 2 decimal places -->
            <set field="invoiceTotal" from="(invoiceTotal as BigDecimal).setScale(2, BigDecimal.ROUND_HALF_UP)"/>

            <entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList">
                <econdition field-name="invoiceId"/></entity-find>
            <set field="appliedPaymentsTotal" from="0.0"/>
            <iterate list="paymentApplicationList" entry="paymentApplication">
                <set field="appliedPaymentsTotal" from="appliedPaymentsTotal + (paymentApplication.amountApplied ?: 0.0)"/></iterate>

            <set field="unpaidTotal" from="invoiceTotal - appliedPaymentsTotal"/>
        </actions>
    </service>
    <service verb="update" noun="InvoiceTotals">
        <description>Update invoiceTotal, appliedPaymentsTotal, and unpaidTotal fields on an Invoice based on InvoiceItem and
            PaymentApplication records, called by EECA on InvoiceItem and PaymentApplication</description>
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="totalOut"/>
            <set field="invoice.invoiceTotal" from="totalOut.invoiceTotal"/>
            <set field="invoice.appliedPaymentsTotal" from="totalOut.appliedPaymentsTotal"/>
            <set field="invoice.unpaidTotal" from="totalOut.unpaidTotal"/>
            <entity-update value-field="invoice"/>
        </actions>
    </service>
    <service verb="calculate" noun="MissingInvoiceTotals" transaction-timeout="600">
        <description>This is a simple service not meant for very large Invoice tables and mainly for migration from older versions
            of mantle-usl before the invoiceTotal, appliedPaymentsTotal, and unpaidTotal fields were added.</description>
        <in-parameters><parameter name="calculateAll" type="Boolean" default="false"/></in-parameters>
        <actions>
            <entity-find entity-name="mantle.account.invoice.Invoice" list="invoiceList">
                <econdition field-name="invoiceTotal" operator="is-null" ignore="calculateAll"/></entity-find>
            <iterate list="invoiceList" entry="invoice">
                <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoice.invoiceId]"
                        out-map="totalOut" out-map-add-to-existing="false"/>
                <set field="invoice.invoiceTotal" from="totalOut.invoiceTotal"/>
                <set field="invoice.appliedPaymentsTotal" from="totalOut.appliedPaymentsTotal"/>
                <set field="invoice.unpaidTotal" from="totalOut.unpaidTotal"/>
                <entity-update value-field="invoice"/>
            </iterate>
            <log level="warn" message="Calculated totals for ${invoiceList.size()} Invoices"/>
        </actions>
    </service>

    <service verb="get" noun="InvoicePrintInfo">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="invoice" type="Map"/>
            <parameter name="currentStatus" type="Map"/>
            <parameter name="invoiceTotal" type="BigDecimal"/>
            <parameter name="appliedPaymentsTotal" type="BigDecimal"/>
            <parameter name="unpaidTotal" type="BigDecimal"/>
            <parameter name="noAdjustmentTotal" type="BigDecimal"/>
            <parameter name="adjustmentTotal" type="BigDecimal"/>
            <parameter name="settlementTerm" type="Map"/>
            <parameter name="orderIdSet" type="Set"><parameter name="orderId"/></parameter>
            <parameter name="paymentApplicationList" type="List"><parameter name="paymentApplication" type="Map"/></parameter>

            <parameter name="invoiceItemList" type="List"><parameter name="invoiceItem" type="Map"/></parameter>
            <parameter name="topItemList" type="List"><parameter name="invoiceItem" type="Map"/></parameter>
            <parameter name="adjustmentItemList" type="List"><parameter name="invoiceItem" type="Map"/></parameter>
            <parameter name="itemTypeSummaryMapList" type="List"><parameter name="itemTypeSummary" type="Map"/></parameter>
            <parameter name="hasProductItems" type="Boolean"/>
            <parameter name="hasTimeEntryItems" type="Boolean"/>

            <parameter name="fromParty" type="Map"/>
            <parameter name="fromContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
            <parameter name="logoImageLocation"/>
            <parameter name="toParty" type="Map"/>
            <parameter name="toContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
            <parameter name="toBillingRep" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <entity-find-one entity-name="moqui.basic.StatusItem" value-field="currentStatus">
                <field-map field-name="statusId" from="invoice?.statusId"/></entity-find-one>
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <entity-find-related-one value-field="invoice" relationship-name="mantle.account.invoice.SettlementTerm" to-value-field="settlementTerm"/>

            <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                <econdition field-name="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find>
            <set field="orderIdSet" from="new TreeSet(orderItemBillingList*.orderId)"/>

            <entity-find entity-name="mantle.account.payment.PaymentApplicationAndPayment" list="paymentApplicationList">
                <econdition field-name="invoiceId"/><order-by field-name="appliedDate"/></entity-find>

            <!-- Invoice Items - Adjustment items separated -->
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/>
                <econdition field-name="isAdjustment" value="N" or-null="true"/>
                <order-by field-name="invoiceItemSeqId"/>
            </entity-find>
            <set field="topItemList" from="invoiceItemList.findAll({ it.parentItemSeqId == null })"/>

            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="adjustmentItemList">
                <econdition field-name="invoiceId"/>
                <econdition field-name="isAdjustment" value="Y"/>
                <order-by field-name="invoiceItemSeqId"/>
            </entity-find>

            <set field="noAdjustmentTotal" from="0.0"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="noAdjustmentTotal" from="noAdjustmentTotal + ((invoiceItem.quantity != null ? invoiceItem.quantity : 1.0) * (invoiceItem.amount ?: 0.0))"/></iterate>
            <set field="noAdjustmentTotal" from="(noAdjustmentTotal as BigDecimal).setScale(2, BigDecimal.ROUND_HALF_UP)"/>

            <set field="adjustmentTotal" from="0.0"/>
            <iterate list="adjustmentItemList" entry="invoiceItem">
                <set field="adjustmentTotal" from="adjustmentTotal + ((invoiceItem.quantity != null ? invoiceItem.quantity : 1.0) * (invoiceItem.amount ?: 0.0))"/></iterate>
            <set field="adjustmentTotal" from="(adjustmentTotal as BigDecimal).setScale(2, BigDecimal.ROUND_HALF_UP)"/>

            <!-- build itemTypeSummaryMapMap with itemTypeEnumId, amount (only for ItemTimeEntry), quantity, total -->
            <set field="hasProductItems" from="false"/>
            <set field="hasTimeEntryItems" from="false"/>
            <set field="itemTypeSummaryMapMap" from="[:]"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="mapKey" from="invoiceItem.itemTypeEnumId"/>
                <if condition="invoiceItem.itemTypeEnumId == 'ItemTimeEntry'">
                    <set field="mapKey" from="mapKey + '::' + invoiceItem.amount"/>
                    <set field="hasTimeEntryItems" from="true"/>
                </if>
                <if condition="invoiceItem.productId"><set field="hasProductItems" from="true"/></if>
                <set field="itemTypeSummaryMap" from="itemTypeSummaryMapMap.get(mapKey)"/>
                <if condition="!itemTypeSummaryMap">
                    <set field="itemTypeSummaryMap" from="[itemTypeEnumId:invoiceItem.itemTypeEnumId, quantity:0, total:0]"/>
                    <if condition="invoiceItem.itemTypeEnumId == 'ItemTimeEntry'">
                        <set field="itemTypeSummaryMap.amount" from="invoiceItem.amount"/></if>
                    <script>itemTypeSummaryMapMap.put(mapKey, itemTypeSummaryMap)</script>
                </if>
                <set field="itemTypeSummaryMap.quantity" from="itemTypeSummaryMap.quantity + (invoiceItem.quantity ?: 1)"/>
                <set field="itemTypeSummaryMap.total" from="itemTypeSummaryMap.total + ((invoiceItem.quantity ?: 1) * (invoiceItem.amount ?: 0))"/>
            </iterate>
            <set field="itemTypeSummaryMapList" from="itemTypeSummaryMapMap.values()"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromParty">
                <field-map field-name="partyId" from="invoice.fromPartyId"/></entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="fromContactInfo"
                    in-map="[partyId:invoice.fromPartyId, postalContactMechPurposeId:'PostalPayment',
                        telecomContactMechPurposeId:'PhonePayment', faxContactMechPurposeId:'PhonePaymentFax',
                        emailContactMechPurposeId:'EmailPayment']"/>
            <service-call name="mantle.party.PartyServices.get#PartyContentLocation" out-map="logoImageOut"
                          in-map="[partyId:invoice.fromPartyId, partyContentTypeEnumIdList:['PcntLogoImage', 'PcntPrimaryImage']]"/>
            <set field="logoImageLocation" from="logoImageOut.contentLocation"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toParty">
                <field-map field-name="partyId" from="invoice.toPartyId"/></entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="toContactInfo"
                    in-map="[partyId:invoice.toPartyId, postalContactMechPurposeId:'PostalBilling',
                        telecomContactMechPurposeId:'PhoneBilling', emailContactMechPurposeId:'EmailBilling']"/>
            <entity-find entity-name="mantle.party.PartyRelationship" list="toBillingRelList">
                <date-filter/>
                <econdition field-name="toPartyId" from="invoice.toPartyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtRepresentative"/>
                <econdition field-name="fromRoleTypeId" value="ClientBilling"/>
            </entity-find>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toBillingRep">
                <field-map field-name="partyId" from="toBillingRelList?.first?.fromPartyId"/></entity-find-one>
        </actions>
    </service>
    <service verb="get" noun="ReceivableStatementInfo">
        <in-parameters>
            <parameter name="toPartyId" required="true"/>
            <parameter name="fromPartyId"/>
            <parameter name="periodDays" type="Integer" default="30"/>
            <parameter name="asOfDate" type="Date"/>
        </in-parameters>
        <out-parameters>
            <parameter name="toParty" type="Map"/>
            <parameter name="toContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
            <parameter name="toBillingRep" type="Map"/>
            <parameter name="periodDays" type="Integer"/>
            <parameter name="asOfTimestamp" type="Timestamp"/>
            <parameter name="currencyUomId"/>
            <parameter name="receivableInfoList" type="List"><parameter name="receivableInfo" type="Map">
                <parameter name="fromPartyId"/>
                <parameter name="fromParty" type="Map"/>
                <parameter name="fromContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
                <parameter name="logoImageLocation"/>
                <parameter name="invoiceList"><parameter name="invoice" type="Map"/></parameter>
                <parameter name="invoiceTotal" type="BigDecimal"/>
                <parameter name="unpaidTotal" type="BigDecimal"/>

                <parameter name="unappliedPaymentList" type="List"><parameter name="payment" type="Map"/></parameter>
                <parameter name="paymentTotal" type="BigDecimal"/>
                <parameter name="unappliedTotal" type="BigDecimal"/>
                <parameter name="balanceDue" type="BigDecimal"/>

                <parameter name="agingSummaryList"><parameter name="agingSummary" type="Map"/></parameter>
                <parameter name="receivableAgingList"><parameter name="unpaidAmount" type="BigDecimal"/></parameter>
                <parameter name="receivableDueAgingList"><parameter name="unpaidAmount" type="BigDecimal"/></parameter>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <set field="periodDaysBd" from="new BigDecimal(periodDays)"/>
            <set field="asOfTimestamp" from="asOfDate ? ec.l10n.parseTimestamp(ec.l10n.format(asOfDate, 'yyyy-MM-dd') + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS') : ec.user.nowTimestamp"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toParty">
                <field-map field-name="partyId" from="toPartyId"/></entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="toContactInfo"
                    in-map="[partyId:toPartyId, postalContactMechPurposeId:'PostalBilling',
                        telecomContactMechPurposeId:'PhoneBilling', emailContactMechPurposeId:'EmailBilling']"/>
            <entity-find entity-name="mantle.party.PartyRelationship" list="toBillingRelList">
                <date-filter/>
                <econdition field-name="toPartyId" from="toPartyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtRepresentative"/>
                <econdition field-name="fromRoleTypeId" value="ClientBilling"/>
            </entity-find>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toBillingRep">
                <field-map field-name="partyId" from="toBillingRelList?.first?.fromPartyId"/></entity-find-one>

            <!-- all Invoices -->
            <entity-find entity-name="mantle.account.invoice.Invoice" list="allInvoiceList">
                <econdition field-name="statusId" operator="in" value="InvoiceFinalized,InvoiceSent"/>
                <econdition field-name="unpaidTotal" operator="not-equals" from="0.0"/>
                <econdition field-name="toPartyId"/>
                <econdition field-name="fromPartyId" ignore-if-empty="true"/>
                <order-by field-name="invoiceDate"/>
            </entity-find>
            <!-- all Payments -->
            <entity-find entity-name="mantle.account.payment.Payment" list="allUnappliedPaymentList">
                <econdition field-name="fromPartyId" from="toPartyId"/>
                <econdition field-name="toPartyId" from="fromPartyId" ignore-if-empty="true"/>
                <econdition field-name="unappliedTotal" operator="not-equals" from="0.0"/>
                <econdition field-name="statusId" operator="in" value="PmntDelivered,PmntConfirmed"/>
            </entity-find>
            <set field="fromPartyIds" from="new TreeSet(allInvoiceList*.fromPartyId + allUnappliedPaymentList*.toPartyId)"/>

            <set field="receivableInfoList" from="[]"/>
            <iterate list="fromPartyIds" entry="fromPartyId">
                <set field="invoiceList" from="[]"/>
                <set field="invoiceTotal" from="0.0"/>
                <set field="unpaidTotal" from="0.0"/>
                <set field="receivableAgingList" from="new ArrayList([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])"/>
                <set field="receivableDueAgingList" from="new ArrayList([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])"/>
                <iterate list="allInvoiceList" entry="invoice">
                    <if condition="invoice.fromPartyId != fromPartyId"><continue/></if>
                    <script><![CDATA[
                        invoiceList.add(invoice)
                        invoiceTotal += invoice.invoiceTotal
                        unpaidTotal += invoice.unpaidTotal
                        if (invoice.currencyUomId) currencyUomId = invoice.currencyUomId

                        Integer invoiceDateDays = invoice.invoiceDate != null ? asOfTimestamp - invoice.invoiceDate : null
                        Integer invoiceDateIdx = invoiceDateDays != null ? (invoiceDateDays < 0 ? 0 :
                                ((invoiceDateDays as BigDecimal) / periodDaysBd).setScale(0, BigDecimal.ROUND_DOWN).intValue() + 1) : null
                        if (invoiceDateIdx != null && invoiceDateIdx > 5) invoiceDateIdx = 5
                        Integer dueDateDays = invoice.dueDate != null ? asOfTimestamp - invoice.dueDate : null
                        Integer dueDateIdx = dueDateDays != null ? (dueDateDays < 0 ? 0 :
                                ((dueDateDays as BigDecimal) / periodDaysBd).setScale(0, BigDecimal.ROUND_DOWN).intValue() + 1) : null
                        if (dueDateIdx != null && dueDateIdx > 5) dueDateIdx = 5

                        if (invoiceDateIdx != null) receivableAgingList[invoiceDateIdx] = receivableAgingList[invoiceDateIdx] + invoice.unpaidTotal
                        if (dueDateIdx != null) receivableDueAgingList[dueDateIdx] = receivableDueAgingList[dueDateIdx] + invoice.unpaidTotal
                    ]]></script>
                </iterate>
                <script>
                    agingSummaryList = []
                    agingSummaryList.add([description:'By Due Date', current:receivableDueAgingList[0], period0:receivableDueAgingList[1],
                            period1:receivableDueAgingList[2], period2:receivableDueAgingList[3], period3:receivableDueAgingList[4],
                            periodRemaining:receivableDueAgingList[5], total:receivableDueAgingList.sum()])
                    agingSummaryList.add([description:'By Invoice Date', current:receivableAgingList[0], period0:receivableAgingList[1],
                            period1:receivableAgingList[2], period2:receivableAgingList[3], period3:receivableAgingList[4],
                            periodRemaining:receivableAgingList[5], total:receivableAgingList.sum()])
                </script>

                <set field="unappliedPaymentList" from="[]"/>
                <set field="paymentTotal" from="0.0"/>
                <set field="unappliedTotal" from="0.0"/>
                <iterate list="allUnappliedPaymentList" entry="payment">
                    <if condition="payment.toPartyId != fromPartyId"><continue/></if>
                    <script>unappliedPaymentList.add(payment)</script>
                    <set field="paymentTotal" from="paymentTotal + (payment.amount ?: 0.0)"/>
                    <set field="unappliedTotal" from="unappliedTotal + payment.unappliedTotal"/>
                </iterate>

                <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromParty">
                    <field-map field-name="partyId" from="fromPartyId"/></entity-find-one>
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="fromContactInfo"
                        in-map="[partyId:fromPartyId, postalContactMechPurposeId:'PostalPayment',
                            telecomContactMechPurposeId:'PhonePayment', emailContactMechPurposeId:'EmailPayment']"/>
                <service-call name="mantle.party.PartyServices.get#PartyContentLocation" out-map="logoImageOut"
                        in-map="[partyId:fromPartyId, partyContentTypeEnumIdList:['PcntLogoImage', 'PcntPrimaryImage']]"/>
                <set field="logoImageLocation" from="logoImageOut.contentLocation"/>
                <script>receivableInfoList.add([fromPartyId:fromPartyId, fromParty:fromParty, fromContactInfo:fromContactInfo,
                        logoImageLocation:logoImageOut.contentLocation, invoiceList:invoiceList,
                        invoiceTotal:invoiceTotal, unpaidTotal:unpaidTotal, paymentTotal:paymentTotal, unappliedTotal:unappliedTotal,
                        balanceDue:(unpaidTotal - unappliedTotal), unappliedPaymentList:unappliedPaymentList,
                        agingSummaryList:agingSummaryList, receivableAgingList:receivableAgingList,
                        receivableDueAgingList:receivableDueAgingList])</script>
            </iterate>
        </actions>
    </service>

    <!-- ==================================================== -->
    <!-- ========== Invoice Create/Update Services ========== -->
    <!-- ==================================================== -->

    <service verb="create" noun="Invoice">
        <description>Create an invoice manually (also used for an order part, shipment, project/work, etc). Initial
            status is InvoiceIncoming unless fromPartyId is has the OrgInternal role, then it is InvoiceInProcess.</description>
        <in-parameters>
            <auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk">
                <exclude field-name="statusId"/></auto-parameters>
            <parameter name="fromPartyId" required="true"/>
            <parameter name="toPartyId" required="true"/>
            <parameter name="invoiceTypeEnumId" default-value="InvoiceSales"/>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="currencyUomId"><description>Defaults to PartyAcctgPreference.baseCurrencyUomId for whichever
                Party (from or to) is an internal organization with an accounting preference record.</description></parameter>
        </in-parameters>
        <out-parameters><parameter name="invoiceId"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRole" list="fromOrgInternalList">
                <econdition field-name="partyId" from="fromPartyId"/>
                <econdition field-name="roleTypeId" value="OrgInternal"/></entity-find>
            <set field="isFromPartyOrgInternal" from="fromOrgInternalList as boolean"/>
            <set field="organizationPartyId" from="isFromPartyOrgInternal ? fromPartyId : toPartyId"/>
            <set field="otherPartyId" from="isFromPartyOrgInternal ? toPartyId : fromPartyId"/>

            <!-- set the initial statusId based on which party is OrgInternal -->
            <set field="statusId" from="isFromPartyOrgInternal ? 'InvoiceInProcess' : 'InvoiceIncoming'"/>

            <!-- get configured currency for org if none specified -->
            <if condition="!currencyUomId">
                <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                        in-map="[organizationPartyId:organizationPartyId]"/>
                <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId"/>
            </if>
            <if condition="!currencyUomId"><set field="currencyUomId" value="USD"/></if>

            <service-call name="create#mantle.account.invoice.Invoice" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="Invoice">
        <description>Used to update all Invoice fields except statusId.</description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk">
                <exclude field-name="statusId"/></auto-parameters>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="!(invoice.statusId in ['InvoiceInProcess', 'InvoiceIncoming', 'InvoiceReceived'])">
                <return error="true" message="Invoice ${invoiceId} is not in a status that allows change"/></if>

            <service-call name="update#mantle.account.invoice.Invoice" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="InvoiceClosed">
        <description>For finalized/etc invoices update certain fields</description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="dueDate" type="Timestamp"/>
            <parameter name="settlementTermId"/>
            <parameter name="paidDate" type="Timestamp"/>
            <parameter name="invoiceMessage"/>
            <parameter name="referenceNumber"/>
            <parameter name="otherPartyOrderId"/>
            <parameter name="description"/>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.account.invoice.Invoice" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="checkSet" noun="InvoiceDueDate">
        <in-parameters>
            <parameter name="invoiceId"/>
            <parameter name="overrideExisting" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="invoice.dueDate != null &amp;&amp; !overrideExisting"><return/></if>

            <set field="origDueDate" from="invoice.dueDate"/>
            <set field="invoiceDate" from="invoice.invoiceDate"/>
            <if condition="!invoice.settlementTermId">
                <entity-find-count entity-name="mantle.party.PartyRole" count-field="fromOrgInternalCount">
                    <econdition field-name="partyId" from="invoice.fromPartyId"/>
                    <econdition field-name="roleTypeId" value="OrgInternal"/></entity-find-count>
                <set field="isFromPartyOrgInternal" from="fromOrgInternalCount &gt; 0"/>

                <set field="organizationPartyId" from="isFromPartyOrgInternal ? fromPartyId : toPartyId"/>
                <set field="otherPartyId" from="isFromPartyOrgInternal ? toPartyId : fromPartyId"/>

                <!-- get agreed on settlement term if none specified -->
                <!-- find an AgreementTerm with a settlementTermId -->
                <entity-find entity-name="mantle.party.agreement.AgreementAndTerm" list="agreementAndTermList">
                    <date-filter/>
                    <econdition field-name="organizationPartyId"/><econdition field-name="otherPartyId"/>
                    <!-- agreement roles a little funny, anything other than Customer is a vendor of some sort so look for Customer or other -->
                    <econdition field-name="otherRoleTypeId" operator="equals" value="Customer" ignore="!isFromPartyOrgInternal"/>
                    <econdition field-name="otherRoleTypeId" operator="not-equals" value="Customer" ignore="isFromPartyOrgInternal"/>
                    <econdition field-name="settlementTermId" operator="is-not-null"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <if condition="agreementAndTermList"><set field="invoice.settlementTermId" from="agreementAndTermList[0].settlementTermId"/></if>

                <!-- if this is a receivable (outgoing) invoice see if there is one on PartyAcctgPreference -->
                <if condition="!invoice.settlementTermId &amp;&amp; isFromPartyOrgInternal">
                    <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                            in-map="[organizationPartyId:invoice.fromPartyId]"/>
                    <set field="invoice.settlementTermId" from="partyAcctgPreference?.settlementTermId"/>
                </if>
            </if>
            <if condition="invoiceDate != null &amp;&amp; invoice.settlementTermId">
                <entity-find-one entity-name="mantle.account.invoice.SettlementTerm" value-field="settlementTerm">
                    <field-map field-name="settlementTermId" from="invoice.settlementTermId"/></entity-find-one>
                <script><![CDATA[
                    def dueDateDt = java.time.ZonedDateTime.ofInstant(java.time.Instant.ofEpochMilli(invoiceDate.time), ec.entity.databaseTimeZone.toZoneId())

                    switch (settlementTerm.termTypeEnumId) {
                        case 'TtFinPaymentDayNextMonth':
                            dueDateDt = dueDateDt.plusMonths(1)
                            // fall through intentionally
                        case 'TtFinPaymentDayCurMonth':
                            int dayOfMonth = settlementTerm.termValue as long ?: 1
                            int maxDays = dueDateDt.range(java.time.temporal.ChronoField.DAY_OF_MONTH).getMaximum()
                            if (dayOfMonth > maxDays) dayOfMonth = maxDays
                            dueDateDt = dueDateDt.withDayOfMonth(dayOfMonth)
                            break
                        default:
                            dueDateDt = dueDateDt.plusDays((settlementTerm.termValue as long) ?: 0)
                    }
                    dueDate = java.sql.Timestamp.from(dueDateDt.toInstant())
                    // could happen for TtFinPaymentDayCurMonth with a day less than today
                    if (dueDate < invoiceDate) {
                        dueDateDt = dueDateDt.plusMonths(1)
                        dueDate = java.sql.Timestamp.from(dueDateDt.toInstant())
                    }

                    if (origDueDate == null || origDueDate != dueDate) {
                        invoice.dueDate = dueDate
                        invoice.update()
                    }
                ]]></script>
            </if>
        </actions>
    </service>

    <service verb="create" noun="InvoiceItem">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceItem" include="nonpk">
                <exclude field-name="invoiceItemSeqId"/></auto-parameters>
        </in-parameters>
        <out-parameters><parameter name="invoiceItemSeqId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="!(invoice.statusId in ['InvoiceInProcess', 'InvoiceIncoming', 'InvoiceReceived'])">
                <return error="true" message="Invoice ${invoiceId} is not in a status that allows change (In Process for receivables, Incoming or Received for payables)"/></if>
            <service-call name="create#mantle.account.invoice.InvoiceItem" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="InvoiceItem">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="invoiceItemSeqId" required="true"/>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceItem" include="nonpk">
                <exclude field-name="invoiceItemSeqId"/></auto-parameters>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="!(invoice.statusId in ['InvoiceInProcess', 'InvoiceIncoming', 'InvoiceReceived'])">
                <return error="true" message="Invoice ${invoiceId} is not in a status that allows change"/></if>
            <service-call name="update#mantle.account.invoice.InvoiceItem" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="InvoiceItemClosed">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="invoiceItemSeqId" required="true"/>
            <parameter name="description"/>
            <parameter name="itemDate" type="Timestamp"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <service-call name="update#mantle.account.invoice.InvoiceItem" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="delete" noun="InvoiceItem">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="invoiceItemSeqId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="!(invoice.statusId in ['InvoiceInProcess', 'InvoiceIncoming', 'InvoiceReceived'])">
                <return error="true" message="Invoice ${invoiceId} is not in a status that allows change"/></if>
            <service-call name="delete#mantle.account.invoice.InvoiceItem" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="adjust" noun="Invoice">
        <description>
            Adjust closed invoices (receivable: Finalized, Sent; payable: Approved) for charges or discounts
            after the invoice has been posted to the GL but before payment is finalized. SECA rule posts an accounting
            transaction for the change as the invoice is already posted.

            Relevant item types include: Write-off, Prompt Payment Discount, Late Payment Charge, Return (before paid)
        </description>
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="description"/>
            <parameter name="amount" type="BigDecimal" required="true"/>
            <parameter name="quantity" type="BigDecimal" default="1"/>

            <parameter name="parentInvoiceItemSeqId">
                <description>Optional, associate adjustment item with a another invoice item.</description></parameter>
            <parameter name="itemDate" type="Timestamp"/>
            <parameter name="itemTypeEnumId" default-value="ItemInvAdjust"><description>Should be an item type that is a
                child of ItemInvAdjust (ItemWriteOff, ItemPromptDiscount, ItemLateCharge, ItemReturnAdjust)</description></parameter>
            <parameter name="overrideGlAccountId"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceItemSeqId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <if condition="!(invoice.statusId in ['InvoiceFinalized', 'InvoiceSent', 'InvoiceApproved'])">
                <return error="true" message="Invoices may only be adjusted in the Finalized or Sent statuses for receivables, and the Approved status for payables; invoice ${invoiceId} is in status ${invoice.statusId}"/></if>

            <if condition="itemDate == null"><set field="itemDate" from="invoice.invoiceDate"/></if>
            <set field="adjustTotal" from="(amount ?: 0) * quantity"/>

            <!-- if adjustment is negative, have enough unpaid for it? -->
            <if condition="adjustTotal &lt; 0">
                <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="invTotal"/>
                <if condition="(-adjustTotal) > invTotal.unpaidTotal">
                    <return error="true" message="Cannot adjust invoice ${invoiceId}, adjustment total ${adjustTotal} is greater than unpaid total ${invTotal.unpaidTotal}"/></if>
            </if>

            <!-- create the InvoiceItem -->
            <if condition="parentInvoiceItemSeqId"><set field="parentInvoiceId" from="invoiceId"/></if>
            <set field="isAdjustment" value="Y"/>
            <service-call name="create#mantle.account.invoice.InvoiceItem" in-map="context" out-map="context"/>

            <!-- NOTE: Invoice Adjustment GL posting done by SECA rule -->
        </actions>
    </service>

    <service verb="create" noun="EntireOrderPartInvoice">
        <!-- Invoice based on OrderPart (for non-shipping orders or orders invoiced before shipping) -->
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="statusId"><description>If specified after create set to this statusId (always created
                initially in InvoiceInProcess or InvoiceIncoming, so there must be a transition to specified status).</description></parameter>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="partialOrderItemList" type="List"><description>If specified used instead of all items in
                the OrderPart. Must be a list of OrderItem EntityValue objects in the OrderPart.</description>
                <parameter name="orderItem" type="Map"><auto-parameters entity-name="mantle.order.OrderItem" include="all"/></parameter>
            </parameter>
        </in-parameters>
        <out-parameters><parameter name="invoiceId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <set field="toPartyId" from="orderPart.customerPartyId"/>
            <entity-find entity-name="mantle.order.OrderPartParty" list="billToList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <econdition field-name="roleTypeId" value="CustomerBillTo"/>
            </entity-find>
            <if condition="billToList"><set field="toPartyId" from="billToList[0].partyId"/></if>

            <set field="description" value="Invoice for Order ${orderId} part ${orderPartSeqId}"/>
            <service-call name="mantle.account.InvoiceServices.create#Invoice" out-map="context"
                    in-map="[invoiceTypeEnumId:'InvoiceSales', fromPartyId:orderPart.vendorPartyId, toPartyId:toPartyId,
                        invoiceDate:invoiceDate, currencyUomId:orderHeader.currencyUomId, otherPartyOrderId:orderPart.otherPartyOrderId,
                        description:description, systemMessageRemoteId:orderHeader.systemMessageRemoteId]"/>

            <if condition="partialOrderItemList"><then>
                <set field="orderItemList" from="partialOrderItemList"/>
            </then><else>
                <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                    <order-by field-name="orderItemSeqId"/></entity-find>
            </else></if>

            <iterate list="orderItemList" entry="orderItem">
                <set field="oibBaseMap" from="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId]"/>
                <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                    <econdition-object field="oibBaseMap"/></entity-find>
                <set field="quantityNotBilled" from="(orderItem.quantity ?: 1) * (orderItem.selectedAmount ?: 1)"/>
                <iterate list="orderItemBillingList" entry="orderItemBilling">
                    <set field="quantityNotBilled" from="quantityNotBilled - orderItemBilling.quantity"/></iterate>
                <if condition="quantityNotBilled &gt; 0">
                    <!-- create InvoiceItem -->
                    <!-- is prorate by quantity needed? -->
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:invoiceId, invoiceItemSeqId:orderItem.orderItemSeqId,
                                parentItemSeqId:orderItem.parentItemSeqId, itemTypeEnumId:orderItem.itemTypeEnumId ?: 'ItemSales',
                                amount:orderItem.unitAmount, description:orderItem.itemDescription, quantity:quantityNotBilled,
                                quantityUomId:orderItem.quantityUomId, otherPartyProductId:orderItem.otherPartyProductId,
                                productId:orderItem.productId, itemDate:orderHeader.placedDate]"/>

                    <!-- for ShipmentItemSource set the invoiceId/invoiceItemSeqId on it -->
                    <set field="quantityNotShipSourced" from="quantityNotBilled"/>
                    <set field="curShipmentId" from="null"/>
                    <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                        <econdition field-name="orderId"/><econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    </entity-find>
                    <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                        <if condition="!shipmentItemSource.invoiceId &amp;&amp; quantityNotShipSourced >= shipmentItemSource.quantity">
                            <set field="shipmentItemSource.invoiceId" from="invoiceId"/>
                            <set field="shipmentItemSource.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                            <entity-update value-field="shipmentItemSource"/>
                            <set field="quantityNotShipSourced" from="quantityNotShipSourced - shipmentItemSource.quantity"/>
                            <set field="curShipmentId" from="shipmentItemSource.shipmentId"/>
                        </if>
                    </iterate>
                    <!-- if quantityNotShipSourced > 0 do anything here? we don't have another Shipment/Item with quantity to match... -->

                    <!-- now create OrderItemBilling with shipmentId if available -->
                    <service-call name="create#mantle.order.OrderItemBilling"
                            in-map="oibBaseMap + [invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                amount:orderItem.unitAmount, quantity:quantityNotBilled, shipmentId:curShipmentId]"/>
                </if>
            </iterate>

            <!-- update Invoice status to statusId passed in -->
            <if condition="statusId"><service-call name="update#mantle.account.invoice.Invoice"
                    in-map="[invoiceId:invoiceId, statusId:statusId]"/></if>
        </actions>
    </service>

    <!-- Invoices based on Shipment -->
    <service verb="create" noun="SalesShipmentInvoices">
        <!-- transaction=cache note: called by SECA and combined with other service that don't support tx cache so can't -->
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="statusId"><description>If specified after create set to this statusId (always created
                initially in InvoiceInProcess, so there must be a transition to specified status).</description></parameter>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>

            <!-- for reuse for purchase orders, represent the differences between sales and purchase order shipments -->
            <parameter name="handleIssuances" type="Boolean" default="true"/>
            <parameter name="handleReceipts" type="Boolean" default="false"/>
            <parameter name="applyPayments" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceIdByOrderPartIdMap" type="Map"/></out-parameters>
        <actions>
            <set field="invoiceIdByOrderPartIdMap" from="[:]"/>

            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList" for-update="true">
                <econdition field-name="shipmentId"/>
                <econdition field-name="orderId" operator="not-equals" from="null"/><!-- only include item sources from orders -->
                <!-- NOTE: Derby blows up with for-update and order-by: <order-by field-name="orderId"/><order-by field-name="orderItemSeqId"/> -->
            </entity-find>
            <order-map-list list="shipmentItemSourceList"><order-by field-name="orderId"/><order-by field-name="orderItemSeqId"/></order-map-list>

            <set field="orderHeaderMap" from="[:]"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <set field="orderItem" from="shipmentItemSource.'mantle.order.OrderItem'"/>
                <if condition="orderItem == null"><continue/></if>
                <set field="itemAmount" from="(orderItem.unitAmount ?: 0) * (orderItem.quantity ?: 0)"/>
                <if condition="itemAmount == 0"><continue/></if>

                <!-- look for existing OrderItemBilling quantity: quantity already billed minus quantity on order shipments -->
                <!-- bill only quantity not already billed -->
                <set field="billingList" from="orderItem.billings"/>
                <set field="billedQuantity" from="billingList*.quantity.sum()"/>
                <set field="allItemSources" from="orderItem.shipmentSources"/>
                <set field="allShippedQuantity" from="allItemSources*.quantity.sum()"/>
                <!-- get shippedNotBilled from this OrderItem's quantity on all shipments, including this one, minus billedQuantity -->
                <!-- only bill up to the quantity on this shipment -->
                <set field="shippedNotBilled" from="(allShippedQuantity ?: 0.0) - (billedQuantity ?: 0.0)"/>
                <set field="quantityToBill" from="shipmentItemSource.quantity &gt; shippedNotBilled ? shippedNotBilled : shipmentItemSource.quantity"/>

                <set field="orderHeader" from="orderHeaderMap.get(shipmentItemSource.orderId)"/>
                <if condition="orderHeader == null">
                    <set field="orderHeader" from="shipmentItemSource.'mantle.order.OrderHeader'"/>
                    <script>orderHeaderMap.put(shipmentItemSource.orderId, orderHeader)</script>
                </if>
                <entity-find-one entity-name="mantle.order.OrderItemBilling" value-field="orderItemBilling"
                                 auto-field-map="[orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId]"/>
                <set field="invoiceId" from="orderItemBilling?orderItemBilling.invoiceId:invoiceIdByOrderPartIdMap[orderItem.orderId + ':' + orderItem.orderPartSeqId]"/>

                <if condition="!invoiceId">
                    <!-- find the OrderPart for the from/toPartyId, etc -->
                    <set field="orderPart" from="orderItem.'mantle.order.OrderPart'"/>
                    <if condition="orderPart">
                        <set field="toPartyId" from="orderPart.customerPartyId"/>
                        <entity-find entity-name="mantle.order.OrderPartParty" list="billToList">
                            <econdition field-name="orderId" from="orderPart.orderId"/>
                            <econdition field-name="orderPartSeqId" from="orderPart.orderPartSeqId"/>
                            <econdition field-name="roleTypeId" value="CustomerBillTo"/>
                        </entity-find>
                        <if condition="billToList"><set field="toPartyId" from="billToList[0].partyId"/></if>

                        <set field="description" value="For Order ${orderItem.orderId} part ${orderItem.orderPartSeqId} and Shipment ${shipmentId}"/>
                        <service-call name="mantle.account.InvoiceServices.create#Invoice" out-map="invOut"
                                in-map="[invoiceTypeEnumId:'InvoiceSales', fromPartyId:orderPart.vendorPartyId, toPartyId:toPartyId,
                                    invoiceDate:invoiceDate, currencyUomId:orderHeader.currencyUomId, otherPartyOrderId:orderPart.otherPartyOrderId,
                                    description:description, systemMessageRemoteId:orderHeader.systemMessageRemoteId]"/>
                        <set field="invoiceId" from="invOut.invoiceId"/>
                        <script>invoiceIdByOrderPartIdMap.put(orderItem.orderId + ':' + orderItem.orderPartSeqId, invoiceId)</script>

                        <!-- set Payment.forInvoiceId on order part payments, if not already set -->
                        <set field="partPayments" from="orderPart.payments"/>
                        <iterate list="partPayments" entry="partPayment">
                            <if condition="!partPayment.forInvoiceId">
                                <set field="partPayment.forInvoiceId" from="invoiceId"/>
                                <entity-update value-field="partPayment"/>
                            </if>
                        </iterate>
                    </if>
                </if>

                <if condition="invoiceId">
                    <!-- create InvoiceItem, OrderItemBilling, set invoiceId,invoiceItemSeqId -->
                    <set field="parentInvoiceItemSeqId" from="null"/>
                    <set field="quantityNotBilled" from="quantityToBill * (orderItem.selectedAmount ?: 1.0)"/>

                    <!-- first do AssetIssuance -->
                    <if condition="handleIssuances">
                        <entity-find entity-name="mantle.product.issuance.AssetIssuance" list="assetIssuanceList" for-update="true">
                            <econdition-object field="[orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId,
                                shipmentId:shipmentId]"/>
                            <order-by field-name="orderItemSeqId"/>
                        </entity-find>
                        <iterate list="assetIssuanceList" entry="assetIssuance">
                            <set field="issuanceQuantityToBill" from="quantityNotBilled &gt; assetIssuance.quantity ?
                                    assetIssuance.quantity : quantityNotBilled"/>
                            <if condition="issuanceQuantityToBill &lt;= 0.0"><continue/></if>
                            <!-- should we make sure the total quantity on all AssetIssuance records matches the
                                quantity on the ShipmentItemSource record? that should be handled when they are created... -->
                            <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                    in-map="[invoiceId:invoiceId, itemTypeEnumId:orderItem.itemTypeEnumId ?: 'ItemProduct',
                                        amount:orderItem.unitAmount, description:orderItem.itemDescription,
                                        quantity:issuanceQuantityToBill, assetId:assetIssuance.assetId,
                                        quantityUomId:orderItem.quantityUomId, productId:orderItem.productId,
                                        otherPartyProductId:orderItem.otherPartyProductId, itemDate:orderHeader.placedDate]"/>
                            <if condition="!parentInvoiceItemSeqId"><set field="parentInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></if>
                            <service-call name="create#mantle.order.OrderItemBilling"
                                    in-map="[orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId,
                                        invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                        assetIssuanceId:assetIssuance.assetIssuanceId, shipmentId:shipmentId,
                                        amount:orderItem.unitAmount, quantity:issuanceQuantityToBill]"/>
                            <!-- set invoiceId and invoiceItemSeqId on AssetIssuance -->
                            <set field="assetIssuance.invoiceId" from="invoiceId"/>
                            <set field="assetIssuance.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                            <entity-update value-field="assetIssuance"/>
                            <!-- update ShipmentItemSource -->
                            <if condition="shipmentItemSource.invoiceItemSeqId"><then>
                                <!-- will have to split the ShipmentItemSource -->
                                <set field="newShipmentItemSource" from="shipmentItemSource.cloneValue()"/>
                                <set field="newShipmentItemSource.shipmentItemSourceId" from="null"/>
                                <entity-sequenced-id-primary value-field="newShipmentItemSource"/>
                                <set field="newShipmentItemSource.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                <set field="newShipmentItemSource.quantity" from="issuanceQuantityToBill"/>
                                <entity-create value-field="newShipmentItemSource"/>

                                <set field="shipmentItemSource.quantity" from="shipmentItemSource.quantity - issuanceQuantityToBill"/>
                                <entity-update value-field="shipmentItemSource"/>
                            </then><else>
                                <set field="shipmentItemSource.invoiceId" from="invoiceId"/>
                                <set field="shipmentItemSource.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                <entity-update value-field="shipmentItemSource"/>
                            </else></if>

                            <set field="quantityNotBilled" from="quantityNotBilled - issuanceQuantityToBill"/>
                        </iterate>
                    </if>

                    <!-- now do AssetReceipt; this service is reused for purchase orders by a wrapping service, in
                        spite of the name handle these too -->
                    <if condition="handleReceipts">
                        <entity-find entity-name="mantle.product.receipt.AssetReceipt" list="assetReceiptList" for-update="true">
                            <econdition-object field="[orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId,
                                shipmentId:shipmentId]"/>
                            <order-by field-name="orderItemSeqId"/>
                        </entity-find>
                        <iterate list="assetReceiptList" entry="assetReceipt">
                            <set field="receiptQuantityToBill" from="quantityNotBilled &gt; assetReceipt.quantityAccepted ?
                                    assetReceipt.quantityAccepted : quantityNotBilled"/>
                            <if condition="receiptQuantityToBill &lt;= 0.0"><continue/></if>
                            <!-- should we make sure the total quantity on all AssetReceipt records matches the
                                quantity on the ShipmentItemSource record? that should be handled when they are created... -->
                            <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                    in-map="[invoiceId:invoiceId, itemTypeEnumId:orderItem.itemTypeEnumId ?: 'ItemProduct',
                                        amount:orderItem.unitAmount, description:orderItem.itemDescription,
                                        quantity:receiptQuantityToBill, assetId:assetReceipt.assetId,
                                        quantityUomId:orderItem.quantityUomId, productId:orderItem.productId,
                                        otherPartyProductId:orderItem.otherPartyProductId, itemDate:orderHeader.placedDate]"/>
                            <if condition="!parentInvoiceItemSeqId"><set field="parentInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></if>
                            <service-call name="create#mantle.order.OrderItemBilling"
                                    in-map="[orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId,
                                        invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                        assetReceiptId:assetReceipt.assetReceiptId, shipmentId:shipmentId,
                                        amount:orderItem.unitAmount, quantity:receiptQuantityToBill]"/>
                            <!-- set invoiceId and invoiceItemSeqId on AssetReceipt -->
                            <set field="assetReceipt.invoiceId" from="invoiceId"/>
                            <set field="assetReceipt.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                            <entity-update value-field="assetReceipt"/>
                            <!-- update ShipmentItemSource -->
                            <if condition="shipmentItemSource.invoiceItemSeqId"><then>
                                <!-- will have to split the ShipmentItemSource -->
                                <set field="newShipmentItemSource" from="shipmentItemSource.cloneValue()"/>
                                <set field="newShipmentItemSource.shipmentItemSourceId" from="null"/>
                                <entity-sequenced-id-primary value-field="newShipmentItemSource"/>
                                <set field="newShipmentItemSource.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                <set field="newShipmentItemSource.quantity" from="receiptQuantityToBill"/>
                                <entity-create value-field="newShipmentItemSource"/>

                                <set field="shipmentItemSource.quantity" from="shipmentItemSource.quantity - receiptQuantityToBill"/>
                                <entity-update value-field="shipmentItemSource"/>
                            </then><else>
                                <set field="shipmentItemSource.invoiceId" from="invoiceId"/>
                                <set field="shipmentItemSource.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                <entity-update value-field="shipmentItemSource"/>
                            </else></if>

                            <set field="quantityNotBilled" from="quantityNotBilled - receiptQuantityToBill"/>
                        </iterate>
                    </if>

                    <!-- there should not be any quantity left over after issuance/receipt records, but just make sure -->
                    <set field="mainIiOut" from="null"/>
                    <if condition="quantityNotBilled &gt; 0">
                        <!-- NOTE: in this case we don't have an assetId -->
                        <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="mainIiOut"
                                in-map="[invoiceId:invoiceId, itemTypeEnumId:orderItem.itemTypeEnumId ?: 'ItemProduct',
                                    amount:orderItem.unitAmount, description:orderItem.itemDescription,
                                    quantity:quantityNotBilled, quantityUomId:orderItem.quantityUomId,
                                    productId:orderItem.productId, otherPartyProductId:orderItem.otherPartyProductId,
                                    itemDate:orderHeader.placedDate]"/>
                        <if condition="!parentInvoiceItemSeqId"><set field="parentInvoiceItemSeqId" from="mainIiOut.invoiceItemSeqId"/></if>
                        <!-- update ShipmentItemSource -->
                        <if condition="shipmentItemSource.invoiceItemSeqId"><then>
                            <!-- will have to split the ShipmentItemSource -->
                            <set field="newShipmentItemSource" from="shipmentItemSource.cloneValue()"/>
                            <set field="newShipmentItemSource.shipmentItemSourceId" from="null"/>
                            <entity-sequenced-id-primary value-field="newShipmentItemSource"/>
                            <set field="newShipmentItemSource.invoiceItemSeqId" from="mainIiOut.invoiceItemSeqId"/>
                            <set field="newShipmentItemSource.quantity" from="quantityNotBilled"/>
                            <entity-create value-field="newShipmentItemSource"/>

                            <set field="shipmentItemSource.quantity" from="shipmentItemSource.quantity - quantityNotBilled"/>
                            <entity-update value-field="shipmentItemSource"/>
                        </then><else>
                            <set field="shipmentItemSource.invoiceId" from="invoiceId"/>
                            <set field="shipmentItemSource.invoiceItemSeqId" from="mainIiOut.invoiceItemSeqId"/>
                            <entity-update value-field="shipmentItemSource"/>
                        </else></if>
                    </if>

                    <!-- also invoice child OrderItems (adjustments, etc) -->
                    <set field="childOrderItemList" from="orderItem.'Child#mantle.order.OrderItem'"/>
                    <order-map-list list="childOrderItemList"><order-by field-name="orderItemSeqId"/></order-map-list>
                    <iterate list="childOrderItemList" entry="childOrderItem">
                        <!-- only ship if no productId, that should be shipped before invoiced -->
                        <if condition="!childOrderItem.productId">
                            <set field="oibBaseMap" from="[orderId:childOrderItem.orderId,
                                orderItemSeqId:childOrderItem.orderItemSeqId]"/>
                            <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                                <econdition field-name="orderId" from="childOrderItem.orderId"/>
                                <econdition field-name="orderItemSeqId" from="childOrderItem.orderItemSeqId"/>
                            </entity-find>
                            <if condition="!orderItemBillingList">
                                <!-- TODO: is prorate by quantity needed? bill quantity not billed, prorated by cur vs OrderItem quantity -->
                                <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="childIiOut"
                                        in-map="[invoiceId:invoiceId, itemTypeEnumId:(childOrderItem.itemTypeEnumId ?: 'ItemSales'),
                                            parentItemSeqId:parentInvoiceItemSeqId, amount:childOrderItem.unitAmount,
                                            description:childOrderItem.itemDescription,
                                            quantity:((childOrderItem.quantity ?: 1) * (childOrderItem.selectedAmount ?: 1)),
                                            quantityUomId:childOrderItem.quantityUomId, itemDate:orderHeader.placedDate]"/>
                                <service-call name="create#mantle.order.OrderItemBilling"
                                        in-map="oibBaseMap + [invoiceId:invoiceId, invoiceItemSeqId:childIiOut.invoiceItemSeqId,
                                            shipmentId:shipmentId, amount:childOrderItem.unitAmount,
                                            quantity:((childOrderItem.quantity ?: 1) * (childOrderItem.selectedAmount ?: 1))]"/>
                            </if>
                        </if>
                    </iterate>
                </if>
            </iterate>

            <!-- for each order invoice uninvoiced, non-Product OrderItems such as shipping charges, etc... -->
            <!-- do all on first invoice... in the future consider prorating by total on this shipment versus order total -->
            <iterate list="invoiceIdByOrderPartIdMap.entrySet()" entry="invoiceIdByOrderIdEntry">
                <set field="orderAndPartId" from="invoiceIdByOrderIdEntry.key"/>
                <set field="orderId" from="orderAndPartId.substring(0, orderAndPartId.indexOf(':'))"/>
                <set field="orderPartSeqId" from="orderAndPartId.substring(orderAndPartId.indexOf(':') + 1)"/>
                <set field="invoiceId" from="invoiceIdByOrderIdEntry.value"/>
                <set field="orderHeader" from="orderHeaderMap.get(orderId)"/>
                <if condition="orderHeader == null">
                    <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
                    <script>orderHeaderMap.put(orderId, orderHeader)</script>
                </if>
                <entity-find entity-name="mantle.order.OrderItem" list="otherOrderItemList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                    <econdition field-name="productId" from="null"/><econdition field-name="parentItemSeqId" from="null"/>
                </entity-find>
                <iterate list="otherOrderItemList" entry="otherOrderItem">
                    <set field="oibBaseMap" from="[orderId:otherOrderItem.orderId, orderItemSeqId:otherOrderItem.orderItemSeqId]"/>
                    <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                        <econdition-object field="oibBaseMap"/></entity-find>
                    <if condition="!orderItemBillingList">
                        <!-- is prorate by quantity needed? -->
                        <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                in-map="[invoiceId:invoiceId, itemTypeEnumId:otherOrderItem.itemTypeEnumId ?: 'ItemSales',
                                    amount:otherOrderItem.unitAmount, description:otherOrderItem.itemDescription,
                                    quantity:((otherOrderItem.quantity ?: 1) * (otherOrderItem.selectedAmount ?: 1)),
                                    quantityUomId:otherOrderItem.quantityUomId, itemDate:orderHeader.placedDate]"/>
                        <service-call name="create#mantle.order.OrderItemBilling"
                                in-map="oibBaseMap + [invoiceId:invoiceId, invoiceItemSeqId:iiOut.invoiceItemSeqId,
                                    shipmentId:shipmentId, amount:otherOrderItem.unitAmount,
                                    quantity:((otherOrderItem.quantity ?: 1) * (otherOrderItem.selectedAmount ?: 1))]"/>
                    </if>
                </iterate>
            </iterate>

            <!-- set invoice status -->
            <if condition="statusId &amp;&amp; statusId != 'InvoiceInProcess'"><iterate list="invoiceIdByOrderPartIdMap.values()" entry="invoiceId">
                <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:statusId]"/>
            </iterate></if>
            
            <!-- apply order payments to new invoices -->
            <if condition="applyPayments">
                <iterate list="invoiceIdByOrderPartIdMap.entrySet()" entry="invoiceIdByOrderIdEntry">
                    <set field="orderAndPartId" from="invoiceIdByOrderIdEntry.key"/>
                    <set field="orderId" from="orderAndPartId.substring(0, orderAndPartId.indexOf(':'))"/>
                    <set field="orderPartSeqId" from="orderAndPartId.substring(orderAndPartId.indexOf(':') + 1)"/>
                    <set field="invoiceId" from="invoiceIdByOrderIdEntry.value"/>
                    <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice">
                        <field-map field-name="invoiceId"/></entity-find-one>
                    <if condition="invoice.statusId == 'InvoiceInProcess'"><service-call name="update#mantle.account.invoice.Invoice"
                            in-map="[invoiceId:invoiceId, statusId:'InvoiceFinalized']"/></if>
                    <service-call name="mantle.account.PaymentServices.apply#OrderPaymentsToInvoice"
                            in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, invoiceId:invoiceId]"/>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="create" noun="PurchaseShipmentInvoices">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="statusId"><description>If specified after create set to
                this statusId (always created initially in InvoiceInProcess, so there must be a transition to specified
                status).</description></parameter>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceIdList" type="List"><parameter name="invoiceId"/></parameter></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <service-call name="org.moqui.impl.BasicServices.find#EnumerationByParent" out-map="shipmentTypeOut"
                    in-map="[parentEnumId:'ShpTpIncoming']"/>
            <if condition="shipment.shipmentTypeEnumId in shipmentTypeOut.enumIdSet">
                <set field="handleIssuances" from="false"/><set field="applyPayments" from="false"/>
                <set field="handleReceipts" from="true"/>
                <service-call name="mantle.account.InvoiceServices.create#SalesShipmentInvoices" in-map="context" out-map="context"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProjectExpenseInvoice">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk"/>
            <parameter name="workEffortId"/>
            <parameter name="fromPartyId" required="true"/>
            <parameter name="toPartyId"/>
            <parameter name="invoiceTypeEnumId" default-value="InvoiceSales"/>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="currencyUomId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
        </out-parameters>
        <actions>
            <if condition="!workEffortId &amp;&amp; !toPartyId">
                <return error="true" message="Must specify either Project (workEffortId) or To Party (toPartyId)"/></if>

            <if condition="!toPartyId">
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="vendorWepList">
                    <date-filter/><econdition field-name="workEffortId"/>
                    <econdition field-name="roleTypeId" operator="in" value="Vendor,VendorBillFrom"/></entity-find>
                <set field="vendorWep" from="vendorWepList?.first"/>
                <set field="toPartyId" from="vendorWep.partyId"/>
            </if>

            <service-call name="mantle.account.InvoiceServices.create#Invoice" in-map="context" out-map="context"/>

            <if condition="workEffortId">
                <service-call name="create#mantle.work.effort.WorkEffortInvoice" in-map="context" out-map="context"/></if>
        </actions>
    </service>

    <service verb="create" noun="ProjectInvoiceItems">
        <in-parameters>
            <parameter name="invoiceId"><description>If specified add item(s) to this Invoice. If empty an Invoice will be created.</description></parameter>
            <parameter name="workEffortId" required="true"/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp">
                <description>Only TimeEntry records before this date will be included. Defaults to now.</description></parameter>
            <parameter name="invoiceDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="currencyUomId"/>
            <parameter name="ratePurposeEnumId" default-value="RaprClient"/>
            <parameter name="workerPartyId"><description>If specified only include time entries and expenses from this Party.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>
            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="billToList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" operator="in" value="Customer,CustomerBillTo"/>
            </entity-find>
            <set field="billToWep" from="billToList ? billToList[0] : null"/>
            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="billFromList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" operator="in" value="Vendor,VendorBillFrom"/>
            </entity-find>
            <set field="billFromWep" from="billFromList ? billFromList[0] : null"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="workerParty">
                <field-map field-name="partyId" from="workerPartyId"/></entity-find-one>

            <!-- create Invoice associated with WorkEffort, use WorkEffortParty to find from/to parties -->
            <if condition="!invoiceId">
                <if condition="!currencyUomId">
                    <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference">
                        <field-map field-name="organizationPartyId" from="ratePurposeEnumId == 'RaprClient' ? billToWep?.partyId : billFromWep?.partyId"/>
                    </entity-find-one>
                    <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId ?: 'USD'"/>
                </if>
                <set field="description" value="Invoice for${workEffort ? ' project ' + ec.resource.expand('WorkEffortNameTemplate','') : ''}${workerParty ? ' worker ' + ec.resource.expand('PartyNameTemplate','',workerParty) : ''}"/>
                <if condition="ratePurposeEnumId == 'RaprClient'"><then>
                    <service-call name="mantle.account.InvoiceServices.create#Invoice" out-map="context"
                            in-map="[invoiceTypeEnumId:'InvoiceSales',
                                fromPartyId:billFromWep?.partyId, toPartyId:billToWep?.partyId,
                                invoiceDate:invoiceDate, currencyUomId:currencyUomId, description:description]"/>
                </then><else>
                    <service-call name="mantle.account.InvoiceServices.create#Invoice" out-map="context"
                            in-map="[invoiceTypeEnumId:'InvoiceSales',
                                fromPartyId:workerPartyId, toPartyId:billFromWep?.partyId,
                                invoiceDate:invoiceDate, currencyUomId:currencyUomId, description:description]"/>
                </else></if>
            </if>

            <!-- iterate through task WorkEffort records and add to Invoice with create#TimeEntryInvoiceItems service -->
            <!-- TODO: consider refactoring to query TimeEntry records by project workEffortId and workerPartyId
                instead of doing a query for each task (was original approach when before workerPartyId support and
                making project workEffortId optional -->
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskWorkEffortList">
                <econdition field-name="rootWorkEffortId" from="workEffortId" ignore-if-empty="true"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
                <order-by field-name="workEffortId"/>
            </entity-find>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>
            <iterate list="taskWorkEffortList" entry="taskWorkEffort">
                <service-call name="mantle.account.InvoiceServices.create#TimeEntryInvoiceItems" out-map="createResult"
                        in-map="[invoiceId:invoiceId, workEffortId:taskWorkEffort.workEffortId, thruDate:thruDate,
                        currencyUomId:currencyUomId, ratePurposeEnumId:ratePurposeEnumId, workerPartyId:workerPartyId]"/>
                <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + createResult.invoiceItemCreatedCount"/>
            </iterate>

            <!-- add items for all expense invoice items for project that are not yet billed through -->
            <if condition="ratePurposeEnumId == 'RaprClient'">
                <entity-find entity-name="mantle.work.effort.WorkEffortInvoiceDetail" list="weidList">
                    <econdition field-name="workEffortId" ignore-if-empty="true"/>
                    <econdition field-name="statusId" value="InvoicePmtSent"/>
                    <econdition field-name="invoiceDate" operator="less-equals" from="thruDate"/>
                    <!-- don't include invoices to project CustomerBillTo partyId -->
                    <econdition field-name="toPartyId" operator="not-equals" from="billToWep.partyId"/>
                    <!-- don't include invoices from project VendorBillFrom partyId -->
                    <econdition field-name="fromPartyId" operator="not-equals" from="billFromWep.partyId"/>
                    <!-- filter by workerPartyId if specified, will be the fromPartyId on an expense invoice -->
                    <econdition field-name="fromPartyId" from="workerPartyId" ignore-if-empty="true"/>
                    <order-by field-name="-invoiceDate"/>
                </entity-find>
                <iterate list="weidList" entry="weid">
                    <!-- create invoice items and InvoiceItemAssocs, set invoice statusId -->
                    <service-call name="mantle.account.InvoiceServices.create#InvoiceBillThroughItems"
                            in-map="[originalInvoiceId:weid.invoiceId, newInvoiceId:invoiceId]" out-map="createResult"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + createResult.invoiceItemCreatedCount"/>
                    <service-call name="update#mantle.account.invoice.Invoice"
                            in-map="[invoiceId:weid.invoiceId, statusId:'InvoiceBilledThrough']"/>
                </iterate>
            </if>

            <if condition="invoiceItemCreatedCount == 0"><then>
                <message error="true">No time entries or expenses found for Project ${ec.resource.expand('WorkEffortNameTemplate','',workEffort)}, not creating invoice or adding items to existing invoice.</message>
            </then><else>
                <message>Added ${invoiceItemCreatedCount} items to Invoice ${invoiceId}</message>
            </else></if>
        </actions>
    </service>

    <!-- InvoiceItems based on TimeEntry -->
    <service verb="create" noun="TimeEntryInvoiceItems">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="workEffortId"><description>If specified get TimeEntry records constrained on it. Generally a task ID.</description></parameter>
            <parameter name="timesheetId"><description>If specified get TimeEntry records constrained on it.</description></parameter>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp">
                <description>Only TimeEntry records before this date will be included. Defaults to now.</description></parameter>
            <parameter name="createSingleItem" type="Boolean" default="false"/>
            <parameter name="currencyUomId" default-value="USD"/>
            <parameter name="ratePurposeEnumId" default-value="RaprClient"><description>If RaprVendor TimeEntry.vendorInvoiceId is
                populated and time entries with it populated are excluded, otherwise with default of RaprClient TimeEntry.invoiceId is used.</description></parameter>
            <parameter name="workerPartyId"><description>If specified only include time entries from this Party.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>

            <if condition="ratePurposeEnumId == 'RaprVendor'"><then><set field="timeEntryInvoiceCondition" from="[vendorInvoiceId:null]"/></then>
                <else><set field="timeEntryInvoiceCondition" from="[invoiceId:null]"/></else></if>
            <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                <econdition-object field="timeEntryInvoiceCondition"/>
                <econdition field-name="workEffortId" ignore-if-empty="true"/>
                <econdition field-name="timesheetId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="thruDate" operator="less-equals" from="thruDate"/>
                    <econdition field-name="thruDate" from="null"/>
                </econditions>
                <!-- filter by workerPartyId if specified -->
                <econdition field-name="partyId" from="workerPartyId" ignore-if-empty="true"/>
            </entity-find>

            <!-- always use ItemTimeEntry, posts to sales/revenue for outgoing invoice and cost of sales for incoming invoice -->
            <set field="itemTypeEnumId" value="ItemTimeEntry"/>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>
            <if condition="createSingleItem"><then>
                <set field="amountTotal" from="0"/>
                <iterate list="timeEntryList" entry="timeEntry">
                    <service-call name="mantle.work.TimeServices.get#TimeEntryAmount" out-map="getTeaOut"
                            in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry, ratePurposeEnumId:ratePurposeEnumId]"/>
                    <set field="amountTotal" from="amountTotal + getTeaOut.amountTotal"/>
                </iterate>
                <if condition="amountTotal">
                    <set field="description" value="Time entries for task ${ec.resource.expand('WorkEffortNameTemplate','',workEffort)}"/>
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,
                                amount:amountTotal, quantity:1, description:description]"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>

                    <iterate list="timeEntryList" entry="timeEntry">
                        <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/>
                        <if condition="rateAmountId">
                            <if condition="ratePurposeEnumId == 'RaprVendor'"><then>
                                <set field="timeEntry.vendorInvoiceId" from="invoiceId"/>
                                <set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                            </then><else>
                                <set field="timeEntry.invoiceId" from="invoiceId"/>
                                <set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                            </else></if>
                            <entity-update value-field="timeEntry"/>
                        </if>
                    </iterate>
                </if>
            </then><else>
                <iterate list="timeEntryList" entry="timeEntry">
                    <service-call name="mantle.work.TimeServices.get#TimeEntryAmount" out-map="getTeaOut"
                            in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry, ratePurposeEnumId:ratePurposeEnumId]"/>

                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,
                                amount:getTeaOut.amount, quantity:getTeaOut.quantity, description:timeEntry.comments?.take(250),
                                itemDate:timeEntry.thruDate]"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>

                    <if condition="ratePurposeEnumId == 'RaprVendor'"><then>
                        <set field="timeEntry.vendorInvoiceId" from="invoiceId"/>
                        <set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                    </then><else>
                        <set field="timeEntry.invoiceId" from="invoiceId"/>
                        <set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                    </else></if>
                    <entity-update value-field="timeEntry"/>
                </iterate>
            </else></if>
        </actions>
    </service>

    <service verb="create" noun="InvoiceBillThroughItems">
        <in-parameters>
            <parameter name="originalInvoiceId" required="true"/>
            <parameter name="newInvoiceId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceItemCreatedCount" type="Long"/></out-parameters>
        <actions>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>

            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="originalInvoice">
                <field-map field-name="invoiceId" from="originalInvoiceId"/></entity-find-one>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="originalInvoiceItemList">
                <econdition field-name="invoiceId" from="originalInvoiceId"/></entity-find>
            <iterate list="originalInvoiceItemList" entry="originalInvoiceItem">
                <!-- if there is a TimeEntry with this as a vendor InvoiceItem skip it so it isn't double billed (and at the incorrect rate) -->
                <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                    <econdition field-name="vendorInvoiceId" from="originalInvoiceItem.invoiceId"/>
                    <econdition field-name="vendorInvoiceItemSeqId" from="originalInvoiceItem.invoiceItemSeqId"/>
                </entity-find>
                <if condition="!timeEntryList">
                    <!-- create new InvoiceItem -->
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:newInvoiceId, itemTypeEnumId:originalInvoiceItem.itemTypeEnumId,
                                amount:originalInvoiceItem.amount, quantity:originalInvoiceItem.quantity,
                                description:originalInvoiceItem.description,
                                itemDate:(originalInvoiceItem.itemDate ?: originalInvoice.invoiceDate)]"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>
                    <!-- create InvoiceItemAssoc between original and new -->
                    <service-call name="create#mantle.account.invoice.InvoiceItemAssoc"
                            in-map="[invoiceId:originalInvoiceItem.invoiceId, invoiceItemSeqId:originalInvoiceItem.invoiceItemSeqId,
                                toInvoiceId:newInvoiceId, toInvoiceItemSeqId:iiOut.invoiceItemSeqId,
                                invoiceItemAssocTypeEnumId:'IiatBillThrough', amount:originalInvoiceItem.amount,
                                quantity:originalInvoiceItem.quantity]"/>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="cancel" noun="Invoice">
        <description>Set to Cancelled status if not already in Cancelled. Un-apply payment invoice if any applied. May
            be called directly or through SECA rule on Cancelled status.</description>
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <actions>
            <service-call name="mantle.account.InvoiceServices.unpay#Invoice"
                    in-map="[invoiceId:invoiceId, statusId:'InvoiceCancelled']"/>
        </actions>
    </service>
    <service verb="cancel" noun="InvoiceAndPayments">
        <description>Cancel the Invoice and any Payment(s) applied to the Invoice and any Payments with matching forInvoiceId even if not applied.</description>
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <actions>
            <!-- get related invoices -->
            <set field="paymentIdSet" from="new TreeSet()"/>
            <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                <econdition field-name="forInvoiceId" from="invoiceId"/></entity-find>
            <if condition="paymentList"><script>paymentIdSet.addAll(paymentList*.paymentId)</script></if>

            <entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList">
                <econdition field-name="invoiceId"/></entity-find>
            <iterate list="paymentApplicationList" entry="paymentApplication">
                <if condition="paymentApplication.paymentId"><script>paymentIdSet.add(paymentApplication.paymentId)</script></if></iterate>

            <!-- most of the work is done through SECA rules, so here we just have to set statuses -->
            <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:'InvoiceCancelled']"/>
            <iterate list="paymentIdSet" entry="paymentId">
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <set field="targetStatusId" from="payment.statusId in ['PmntProposed', 'PmntPromised'] ? 'PmntCancelled' : 'PmntVoid'"/>
                <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:targetStatusId]"/>
            </iterate>
        </actions>
    </service>
    <service verb="unpay" noun="Invoice">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="statusId"/>
        </in-parameters>
        <actions>
            <!-- check/update the status -->
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice" for-update="true"/>
            <if condition="!statusId">
                <if condition="invoice.statusId == 'InvoicePmtRecvd'"><set field="statusId" value="InvoiceFinalized"/></if>
                <if condition="invoice.statusId == 'InvoicePmtSent'"><set field="statusId" value="InvoiceApproved"/></if>
            </if>
            <if condition="statusId &amp;&amp; invoice.statusId != statusId">
                <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:statusId]"/></if>

            <!-- unapply payment applications -->
            <entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList">
                <econdition field-name="invoiceId"/></entity-find>
            <iterate list="paymentApplicationList" entry="paymentApplication"><if condition="paymentApplication.amountApplied != 0">
                <service-call name="mantle.account.PaymentServices.unapply#PaymentApplication"
                        in-map="[paymentApplicationId:paymentApplication.paymentApplicationId]"/>
            </if></iterate>
        </actions>
    </service>

    <service verb="autoApplyTo" noun="Invoice">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <out-parameters><parameter name="paymentIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>

    <service verb="create" noun="InvoiceItemDetail">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceItemDetail" include="nonpk"/>
            <parameter name="invoiceId" required="true"/><parameter name="invoiceItemSeqId" required="true"/>
            <parameter name="createNoQuantity" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceItemDetailId"/></out-parameters>
        <actions>
            <if condition="!assetId &amp;&amp; !facilityId"><return error="true" message="Must specify either asset or facility"/></if>
            <if condition="assetId &amp;&amp; facilityId"><return error="true" message="Both asset and facility specified, choose only one"/></if>
            <if condition="!createNoQuantity &amp;&amp; !quantity"><return/></if>
            <if condition="assetId"><then>
                <entity-find entity-name="mantle.account.invoice.InvoiceItemDetail" list="iidList">
                    <econdition field-name="invoiceId"/><econdition field-name="invoiceItemSeqId"/><econdition field-name="assetId"/></entity-find>
                <if condition="iidList"><return message="Detail already exists for item ${invoiceItemSeqId} and asset ${assetId}"/></if>
            </then><else>
                <entity-find entity-name="mantle.account.invoice.InvoiceItemDetail" list="iidList">
                    <econdition field-name="invoiceId"/><econdition field-name="invoiceItemSeqId"/><econdition field-name="facilityId"/></entity-find>
                <if condition="iidList"><return message="Detail already exists for item ${invoiceItemSeqId} and facility ${facilityId}"/></if>
            </else></if>
            <service-call name="create#mantle.account.invoice.InvoiceItemDetail" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="distribute" noun="InvoiceItemDetail">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="invoiceItemSeqId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.InvoiceItem" value-field="invoiceItem"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItemDetail" list="detailList">
                <econdition field-name="invoiceId"/><econdition field-name="invoiceItemSeqId"/></entity-find>
            <set field="quantityRemaining" from="invoiceItem.quantity"/>
            <set field="totalFacilitySize" from="0"/>
            <set field="detailsToUpdate" from="[]"/>
            <set field="facilityMap" from="[:]"/>
            <set field="facilitySizeMap" from="[:]"/>
            <iterate list="detailList" entry="detail">
                <if condition="detail.facilityId == null"><continue/></if>
                <if condition="detail.quantity"><then>
                    <set field="quantityRemaining" from="quantityRemaining - detail.quantity"/>
                </then><else>
                    <set field="detailFacility" from="facilityMap.get(detail.facilityId)"/>
                    <if condition="detailFacility == null">
                        <entity-find-one entity-name="mantle.facility.Facility" value-field="detailFacility">
                            <field-map field-name="facilityId" from="detail.facilityId"/></entity-find-one>
                        <script>facilityMap.put(detail.facilityId, detailFacility)</script>
                    </if>
                    <if condition="detailFacility.facilitySize">
                        <if condition="detailFacility.facilitySizeUomId">
                            <!-- convert to standard unit, like acres... if unit not an area return error -->
                            <set field="currentSize" from="detailFacility.facilitySize"/>
                            <set field="sizeUom" from="detailFacility.sizeUom"/>
                            <if condition="sizeUom.uomTypeEnumId != 'UT_AREA_MEASURE'">
                                <return error="true" message="Facility ${detailFacility.pseudoId}: ${detailFacility.facilityName} has a size UOM that is not an area"/></if>
                            <if condition="activeSizeUom == null"><then>
                                <set field="activeSizeUom" from="sizeUom"/>
                            </then><else-if condition="activeSizeUom.uomId != sizeUom.uomId">
                                <service-call name="org.moqui.impl.BasicServices.convert#Uom"
                                              in-map="[uomId:sizeUom.uomId, toUomId:activeSizeUom.uomId, amount:currentSize]"
                                              out-map="sizeConvertOut" out-map-add-to-existing="false"/>
                                <check-errors/>
                                <set field="currentSize" from="sizeConvertOut.convertedAmount"/>
                            </else-if></if>
                        </if>
                        <set field="totalFacilitySize" from="totalFacilitySize + currentSize"/>
                        <script>facilitySizeMap.put(detail.facilityId, currentSize)</script>
                        <script>detailsToUpdate.add(detail)</script>
                    </if>
                </else></if>
            </iterate>
            <iterate list="detailsToUpdate" entry="detail">
                <set field="currentSize" from="facilitySizeMap.get(detail.facilityId)"/>
                <set field="detail.quantity" from="quantityRemaining * (currentSize / totalFacilitySize)"/>
                <entity-update value-field="detail"/>
            </iterate>
            <message>Set quantity on ${detailsToUpdate.size()} details for item ${invoiceItemSeqId}, total facility size: ${ec.l10n.format(totalFacilitySize, '')}${activeSizeUom != null ? ' (' + activeSizeUom.description + ')' : ''}, quantity distributed: ${ec.l10n.format(quantityRemaining, '')}</message>
        </actions>
    </service>

    <service verb="check" noun="InvoicesPaid" transaction-timeout="600">
        <description>Very simple service to find all invoices (receivable) in Finalized and Sent statuses and if unpaid amount is 0 change to Payment Received</description>
        <actions>
            <entity-find entity-name="mantle.account.invoice.Invoice" list="invoiceList">
                <econdition field-name="statusId" operator="in" value="InvoiceFinalized,InvoiceSent"/>
            </entity-find>
            <set field="updatedCount" from="0"/>
            <iterate list="invoiceList" entry="invoice">
                <if condition="invoice.unpaidTotal == null">
                    <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoice.invoiceId]" out-map="totalOut"/>
                    <set field="invoice.invoiceTotal" from="totalOut.invoiceTotal"/>
                    <set field="invoice.appliedPaymentsTotal" from="totalOut.appliedPaymentsTotal"/>
                    <set field="invoice.unpaidTotal" from="totalOut.unpaidTotal"/>
                    <entity-update value-field="invoice"/>
                </if>
                <if condition="invoice.unpaidTotal == 0.0">
                    <set field="invoice.statusId" value="InvoicePmtRecvd"/>
                    <entity-update value-field="invoice"/>
                    <set field="updatedCount" from="updatedCount + 1"/>
                </if>
            </iterate>
            <log level="warn" message="Found ${invoiceList.size()} invoices in Finalized and Sent statuses, ${updatedCount} had zero unpaid and updated to Payment Received"/>
        </actions>
    </service>

    <!-- ============================================== -->
    <!-- ========== Invoice Content Services ========== -->
    <!-- ============================================== -->

    <service verb="get" noun="InvoiceContentLocation">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="contentTypeEnumIdList" type="List" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contentLocation"/>
            <parameter name="invoiceContent"/>
        </out-parameters>
        <actions>
            <iterate list="contentTypeEnumIdList" entry="contentTypeEnumId">
                <entity-find entity-name="mantle.account.invoice.InvoiceContent" list="invoiceContentList">
                    <econdition field-name="invoiceId"/><econdition field-name="contentTypeEnumId"/>
                    <order-by field-name="-contentDate"/></entity-find>
                <if condition="invoiceContentList">
                    <set field="invoiceContent" from="invoiceContentList[0]"/>
                    <break/>
                </if>
            </iterate>
            <set field="contentLocation" from="invoiceContent ? invoiceContent.contentLocation : null"/>
        </actions>
    </service>

    <service verb="create" noun="InvoiceContent">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceContent" include="nonpk">
                <exclude field-name="contentLocation"/></auto-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <out-parameters><parameter name="invoiceContentId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.account.invoice.InvoiceContent" in-map="context" out-map="context"/>
            <if condition="contentFile != null &amp;&amp; contentFile.size &gt; 0">
                <service-call name="mantle.account.InvoiceServices.save#InvoiceContentFile" in-map="context"/></if>
        </actions>
    </service>
    <service verb="update" noun="InvoiceContent">
        <in-parameters>
            <parameter name="invoiceContentId" required="true"/>
            <auto-parameters entity-name="mantle.account.invoice.InvoiceContent" include="nonpk">
                <exclude field-name="contentLocation"/></auto-parameters>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <actions>
            <if condition="contentFile != null &amp;&amp; contentFile.size &gt; 0">
                <entity-find-one entity-name="mantle.account.invoice.InvoiceContent" value-field="invoiceContent"/>
                <service-call name="mantle.account.InvoiceServices.save#InvoiceContentFile" out-map="context"
                        in-map="context + [invoiceId:invoiceContent.invoiceId, saveContentLocation:false]"/>
            </if>
            <service-call name="update#mantle.account.invoice.InvoiceContent" in-map="context"/>
        </actions>
    </service>
    <service verb="save" noun="InvoiceContentFile">
        <in-parameters>
            <parameter name="invoiceContentId" required="true"/>
            <parameter name="invoiceId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="saveContentLocation" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters><parameter name="contentLocation"/></out-parameters>
        <actions>
            <set field="filename" from="contentFile.getName()"/>
            <set field="contentRoot" from="ec.user.getPreference('mantle.content.root') ?: 'dbresource://mantle/content'"/>
            <set field="contentLocation" value="${contentRoot}/invoice/${invoiceId}/content_${invoiceContentId}/${filename}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = contentFile.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <if condition="saveContentLocation"><service-call name="update#mantle.account.invoice.InvoiceContent"
                    in-map="[invoiceContentId:invoiceContentId, contentLocation:contentLocation]"/></if>
        </actions>
    </service>
</services>
