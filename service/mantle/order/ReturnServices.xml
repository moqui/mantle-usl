<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="ReturnDisplayInfo">
        <in-parameters><parameter name="returnId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="returnHeader" type="Map"/>
            <parameter name="statusId"/>
            <parameter name="statusHistoryList" type="List"><parameter name="auditLog" type="Map"/></parameter>
            <parameter name="returnChangeable" type="Boolean"/>
            <parameter name="isVendorOrgInternal" type="Boolean"/>
            <parameter name="orgPartyId"/><parameter name="shippingPartyId"/>

            <parameter name="returnItemList" type="List"><parameter name="returnItem" type="Map"/></parameter>
            <parameter name="postalAddressList" type="List"><parameter name="postalAddress" type="Map"/></parameter>
            <parameter name="telecomNumberList" type="List"><parameter name="telecomNumber" type="Map"/></parameter>

            <parameter name="salesOrderIdSet" type="Set"><parameter name="salesOrderId"/></parameter>
            <parameter name="replacementOrderIdSet" type="Set"><parameter name="replacementOrderId"/></parameter>
            <parameter name="purchaseOrderIdSet" type="Set"><parameter name="purchaseOrderId"/></parameter>

            <parameter name="shipmentItemSourceList" type="List"><parameter name="shipmentItemSource" type="Map"/></parameter>
            <parameter name="receivingShipmentIdSet" type="Set"><parameter name="receivingShipmentId"/></parameter>
            <parameter name="shippingShipmentIdSet" type="Set"><parameter name="shippingShipmentId"/></parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>

            <set field="statusId" from="returnHeader.statusId"/>
            <entity-find entity-name="moqui.entity.EntityAuditLog" list="statusHistoryList">
                <econdition field-name="changedEntityName" value="mantle.order.return.ReturnHeader"/>
                <econdition field-name="changedFieldName" value="statusId"/>
                <econdition field-name="pkPrimaryValue" from="returnId"/>
            </entity-find>
            <set field="returnChangeable" from="statusId in ['ReturnCreated', 'ReturnRequested', 'ReturnApproved']"/>

            <entity-find entity-name="mantle.party.PartyRole" list="vendorOrgInternalList">
                <econdition field-name="partyId" from="returnHeader.vendorPartyId"/>
                <econdition field-name="roleTypeId" value="OrgInternal"/></entity-find>
            <!-- if isVendorOrgInternal is a return from customer, otherwise is a return to supplier -->
            <set field="isVendorOrgInternal" from="vendorOrgInternalList as boolean"/>

            <set field="orgPartyId" from="isVendorOrgInternal ? returnHeader.vendorPartyId : returnHeader.customerPartyId"/>
            <set field="shippingPartyId" from="isVendorOrgInternal ? returnHeader.customerPartyId : returnHeader.vendorPartyId"/>
            <!-- get postalAddressList, telecomNumberList; may only have dest or origin used for order, just get all -->
            <entity-find entity-name="mantle.party.contact.PartyContactMechPostalAddress" list="postalAddressList">
                <date-filter/><econdition field-name="partyId" from="shippingPartyId"/></entity-find>
            <entity-find entity-name="mantle.party.contact.PartyContactMechTelecomNumber" list="telecomNumberList">
                <date-filter/><econdition field-name="partyId" from="shippingPartyId"/></entity-find>

            <set field="salesOrderIdSet" from="new TreeSet()"/>
            <set field="replacementOrderIdSet" from="new TreeSet()"/>
            <set field="purchaseOrderIdSet" from="new TreeSet()"/>
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/></entity-find>
            <iterate list="returnItemList" entry="returnItem"><script>
                if (isVendorOrgInternal) {
                    if (returnItem.orderId) salesOrderIdSet.add(returnItem.orderId)
                    if (returnItem.replacementOrderId) replacementOrderIdSet.add(returnItem.replacementOrderId)
                } else {
                    if (returnItem.orderId) purchaseOrderIdSet.add(returnItem.orderId)
                }
            </script></iterate>

            <set field="receivingShipmentIdSet" from="new TreeSet()"/>
            <set field="shippingShipmentIdSet" from="new TreeSet()"/>
            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                <econdition field-name="returnId"/></entity-find>
            <iterate list="shipmentItemSourceList" entry="sis"><script>
                if (isVendorOrgInternal) { receivingShipmentIdSet.add(sis.shipmentId) }
                else { shippingShipmentIdSet.add(sis.shipmentId)}
            </script></iterate>
        </actions>
    </service>

    <!-- ============================================ -->
    <!-- ========== Create Return Services ========== -->
    <!-- ============================================ -->

    <service verb="create" noun="Return">
        <in-parameters>
            <auto-parameters entity-name="mantle.order.return.ReturnHeader" include="nonpk">
                <exclude field-name="visitId"/></auto-parameters>
            <parameter name="vendorPartyId" required="true"/>
            <parameter name="customerPartyId" required="true"/>
            <parameter name="statusId" default-value="ReturnCreated"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <out-parameters><parameter name="returnId"/></out-parameters>
        <actions>
            <set field="visitId" from="ec.user.visitId"/>
            <service-call name="create#mantle.order.return.ReturnHeader" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="create" noun="ReturnFromOrder">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <auto-parameters entity-name="mantle.order.return.ReturnHeader" include="nonpk">
                <exclude field-name="statusId"/><exclude field-name="customerPartyId"/><exclude field-name="vendorPartyId"/>
                <exclude field-name="entryDate"/><exclude field-name="currencyUomId"/><exclude field-name="visitId"/></auto-parameters>
            <parameter name="statusId" default-value="ReturnCreated"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <out-parameters><parameter name="returnId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <if condition="!orderPart"><return error="true" message="Could not find Order Part [${orderId}:${orderPartSeqId}]"/></if>
            <!-- Ideally order should be completed, but allow Approved and Sent for partially fulfilled orders,
                will check actual fulfillment when adding items -->
            <if condition="!(orderPart.statusId in ['OrderApproved', 'OrderSent', 'OrderCompleted'])">
                <return error="true" message="Order in status ${orderPart.statusId} cannot be returned"/></if>

            <set field="customerPartyId" from="orderPart.customerPartyId"/>
            <set field="vendorPartyId" from="orderPart.vendorPartyId"/>
            <set field="currencyUomId" from="orderHeader.currencyUomId"/>

            <if condition="!facilityId"><set field="facilityId" from="orderPart.facilityId"/></if>

            <!-- Only set postalContactMechId, telecomContactMechId if vendor is internal org, ie if it is Sales Order they are the customer's -->
            <entity-find entity-name="mantle.party.PartyRole" list="vendorOrgInternalList">
                <econdition field-name="partyId" from="vendorPartyId"/>
                <econdition field-name="roleTypeId" value="OrgInternal"/></entity-find>
            <if condition="vendorOrgInternalList">
                <if condition="!postalContactMechId"><set field="postalContactMechId" from="orderPart.postalContactMechId"/></if>
                <if condition="!telecomContactMechId"><set field="telecomContactMechId" from="orderPart.telecomContactMechId"/></if>
            </if>

            <if condition="!shipmentMethodEnumId"><set field="shipmentMethodEnumId" from="orderPart.shipmentMethodEnumId"/></if>
            <if condition="!carrierPartyId"><set field="carrierPartyId" from="orderPart.carrierPartyId"/></if>
            <if condition="!paymentMethodId">
                <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/></entity-find>
                <iterate list="paymentList" entry="payment"><if condition="payment.paymentMethodId">
                    <set field="paymentMethodId" from="payment.paymentMethodId"/></if></iterate>
            </if>

            <set field="visitId" from="ec.user.visitId"/>
            <service-call name="create#mantle.order.return.ReturnHeader" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="find" noun="OrderOpenReturns">
        <in-parameters><parameter name="orderId" required="true"/><parameter name="orderPartSeqId" required="true"/></in-parameters>
        <out-parameters><parameter name="openReturnList" type="List"><parameter name="returnHeader" type="Map"/></parameter></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <entity-find entity-name="mantle.order.return.ReturnHeader" list="openReturnList">
                <econdition field-name="customerPartyId" from="orderPart.customerPartyId"/>
                <econdition field-name="vendorPartyId" from="orderPart.vendorPartyId"/>
                <econdition field-name="statusId" operator="in" value="ReturnCreated,ReturnRequested"/>
            </entity-find>
        </actions>
    </service>
    <service verb="find" noun="ReturnableOrderItems">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="lookBackDays" type="Integer" default="30"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemInfoList" type="List"><parameter name="orderItemInfo" type="Map">
                <parameter name="orderId"/>
                <parameter name="orderItemSeqId"/>
                <parameter name="itemTypeEnumId"/>
                <parameter name="productId"/>
                <parameter name="orderQuantity" type="BigDecimal"/>
                <parameter name="invoiceQuantity" type="BigDecimal"/>
                <parameter name="returnQuantity" type="BigDecimal"/>
                <parameter name="returnableQuantity" type="BigDecimal"/>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>
            <script>
                Calendar lookBackCal = ec.user.nowCalendar
                lookBackCal.add(Calendar.DAY_OF_MONTH, -lookBackDays)
                lookBackTs = new java.sql.Timestamp(lookBackCal.getTimeInMillis())
            </script>

            <!-- Match customerPartyId, vendorPartyId (to OrderPart), include (invoiced items (physical shipped or not); shipped items/quantities), exclude returned -->
            <entity-find entity-name="mantle.order.return.ReturnableOrderItemView" list="returnableItems">
                <econdition field-name="customerPartyId" from="returnHeader.customerPartyId"/>
                <econdition field-name="vendorPartyId" from="returnHeader.vendorPartyId"/>
                <econdition field-name="placedDate" operator="greater-equals" from="lookBackTs"/>
                <select-field field-name="orderId"/><select-field field-name="orderItemSeqId"/>
                <select-field field-name="itemTypeEnumId"/><select-field field-name="productId"/>
                <select-field field-name="quantity"/><select-field field-name="invoiceQuantity"/>
                <order-by field-name="orderId"/><order-by field-name="orderItemSeqId"/>
            </entity-find>

            <set field="orderItemInfoList" from="[]"/>
            <iterate list="returnableItems" entry="returnableItem">
                <entity-find entity-name="mantle.order.return.ReturnItemQuantity" list="riqList">
                    <econdition field-name="orderId" from="returnableItem.orderId"/>
                    <econdition field-name="orderItemSeqId" from="returnableItem.orderItemSeqId"/>
                    <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
                    <select-field field-name="returnQuantity"/>
                </entity-find>
                <set field="returnQuantity" from="(riqList ? (riqList[0].returnQuantity ?: 0) : 0) as BigDecimal"/>
                <set field="returnableQuantity" from="(returnableItem.invoiceQuantity ?: 0) - returnQuantity"/>
                <if condition="returnableQuantity > 0">
                    <script>orderItemInfoList.add([orderId:returnableItem.orderId, orderItemSeqId:returnableItem.orderItemSeqId,
                                itemTypeEnumId:returnableItem.itemTypeEnumId, productId:returnableItem.productId,
                                orderQuantity:returnableItem.quantity, invoiceQuantity:returnableItem.invoiceQuantity,
                                returnQuantity:returnQuantity, returnableQuantity:returnableQuantity])</script>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="calculate" noun="OrderItemReturnable" authz-action="view">
        <description>Calculate returnable quantity for an OrderItem with pre-queried OrderItemBilling and ReturnItem
            lists, which can be lists for an entire order (ie filtered before calc) and if are null are queried here.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/><parameter name="orderItemSeqId" required="true"/>
            <parameter name="orderItemBillingList" type="List"><parameter name="oib" type="Map"/></parameter>
            <parameter name="returnItemList" type="List"><parameter name="returnItem" type="Map"/></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceQuantity" type="BigDecimal"/>
            <parameter name="returnQuantity" type="BigDecimal"/>
            <parameter name="returnableQuantity" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <set field="invoiceQuantity" from="0"/>
            <if condition="orderItemBillingList == null">
                <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                    <econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/></entity-find>
            </if>
            <iterate list="orderItemBillingList" entry="oib">
                <if condition="oib.orderId != orderId || oib.orderItemSeqId != orderItemSeqId"><continue/></if>
                <set field="invoiceQuantity" from="invoiceQuantity + oib.quantity"/>
            </iterate>

            <set field="returnQuantity" from="0"/>
            <if condition="returnItemList == null">
                <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                    <econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/>
                    <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
                    <order-by field-name="orderItemSeqId"/>
                </entity-find>
            </if>
            <iterate list="returnItemList" entry="returnItem">
                <if condition="returnItem.orderId != orderId || returnItem.orderItemSeqId != orderItemSeqId"><continue/></if>
                <set field="returnQuantity" from="returnQuantity + returnItem.returnQuantity"/>
            </iterate>

            <set field="returnableQuantity" from="invoiceQuantity - returnQuantity"/>
        </actions>
    </service>
    <service verb="add" noun="OrderItemToReturn">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <auto-parameters entity-name="mantle.order.return.ReturnItem" include="nonpk">
                <exclude field-name="statusId"/><exclude field-name="itemTypeEnumId"/><exclude field-name="productId"/>
                <exclude field-name="returnQuantity"/><exclude field-name="receivedQuantity"/>
                <exclude field-name="replacementOrderId"/><exclude field-name="refundPaymentId"/>
                <exclude field-name="finAccountTransId"/>
                <exclude field-name="responseAmount"/><exclude field-name="responseDate"/></auto-parameters>
            <parameter name="statusId" default-value="ReturnCreated"/>
            <parameter name="returnQuantity" type="BigDecimal" required="true"/>
            <parameter name="returnReasonEnumId" required="true"/>
            <parameter name="returnResponseEnumId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="returnItemSeqId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem"/>
            <if condition="!orderItem"><return error="true" message="Could not find Order Item [${orderId}:${orderItemSeqId}]"/></if>

            <!-- make sure returnQuantity is not greater than returnable amount -->
            <entity-find entity-name="mantle.order.OrderItemBillingQuantity" list="oibqList">
                <econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/><select-field field-name="quantity"/></entity-find>
            <set field="billedQuantity" from="oibqList?.getAt(0)?.quantity ?: 0.0"/>
            <entity-find entity-name="mantle.order.return.ReturnItemQuantity" list="riqList">
                <econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/>
                <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
                <select-field field-name="returnQuantity"/>
            </entity-find>
            <set field="returnedQuantity" from="riqList ? (riqList[0].returnQuantity ?: 0) : 0"/>

            <if condition="(returnedQuantity + returnQuantity) &gt; billedQuantity">
                <return error="true" message="Tried to return more than is returnable; quantity billed: ${billedQuantity}, already returned: ${returnedQuantity}, tried to return: ${returnQuantity}"/></if>

            <set field="itemTypeEnumId" from="orderItem.itemTypeEnumId"/>
            <set field="productId" from="orderItem.productId"/>
            <if condition="!description"><set field="description" from="orderItem.itemDescription"/></if>

            <service-call name="create#mantle.order.return.ReturnItem" in-map="context" out-map="context"/>
        </actions>
    </service>

    <!-- ============================================= -->
    <!-- ========== Process Return Services ========== -->
    <!-- ============================================= -->

    <service verb="change" noun="ReturnStatusInterface" type="interface">
        <in-parameters><parameter name="returnId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
    </service>
    <service verb="update" noun="ReturnStatus">
        <in-parameters><parameter name="returnId" required="true"/><parameter name="statusId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/></entity-find>
            <iterate list="returnItemList" entry="returnItem">
                <if condition="returnItem.statusId == 'ReturnCancelled'"><continue/></if>
                <service-call name="update#mantle.order.return.ReturnItem"
                    in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId, statusId:statusId]"/>
            </iterate>

            <service-call name="update#mantle.order.return.ReturnHeader" out-map="context"
                    in-map="[returnId:returnId, statusId:statusId]"/>
        </actions>
    </service>
    <service verb="checkUpdate" noun="ReturnHeaderStatus">
        <in-parameters><parameter name="returnId" required="true"/><parameter name="statusId" required="true"/>
            <parameter name="itemStatusIds" type="Collection" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <set field="allMatch" from="true"/>
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/></entity-find>
            <iterate list="returnItemList" entry="otherItem">
                <if condition="!(otherItem.statusId in itemStatusIds)">
                    <set field="allMatch" from="false"/></if></iterate>
            <if condition="allMatch"><service-call name="update#mantle.order.return.ReturnHeader" out-map="context"
                    in-map="[returnId:returnId, statusId:statusId]"/></if>
        </actions>
    </service>

    <service verb="request" noun="Return">
        <implements service="mantle.order.ReturnServices.change#ReturnStatusInterface"/>
        <actions><service-call name="mantle.order.ReturnServices.update#ReturnStatus" out-map="context" in-map="context + [statusId:'ReturnRequested']"/></actions>
    </service>
    <service verb="approve" noun="Return">
        <implements service="mantle.order.ReturnServices.change#ReturnStatusInterface"/>
        <actions><service-call name="mantle.order.ReturnServices.update#ReturnStatus" out-map="context" in-map="context + [statusId:'ReturnApproved']"/></actions>
    </service>

    <service verb="receive" noun="ReturnShipmentItems">
        <description>Call receive#ReturnItem for all items returned on a Shipment. Called by SECA rule on Shipment status Delivered.</description>
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <!-- If not a Sales Return Shipment return now -->
            <if condition="shipment.shipmentTypeEnumId != 'ShpTpSalesReturn'"><return/></if>

            <!-- doesn't work with transaction cache, maybe future:
            <entity-find entity-name="mantle.product.receipt.AssetReceiptSummary" list="receiptSummaryList">
                <econdition field-name="shipmentId"/>
                <select-field field-name="returnId"/><select-field field-name="returnItemSeqId"/>
                <select-field field-name="quantityAccepted"/>
            </entity-find>
            <iterate list="receiptSummaryList" entry="receiptSummary">
                <service-call name="mantle.order.ReturnServices.receive#ReturnItem"
                        in-map="[returnId:receiptSummary.returnId, returnItemSeqId:receiptSummary.returnItemSeqId,
                            receivedQuantity:receiptSummary.quantityAccepted]"/>
            </iterate>
            -->
            <entity-find entity-name="mantle.product.receipt.AssetReceipt" list="receiptList">
                <econdition field-name="shipmentId"/>
                <select-field field-name="returnId"/><select-field field-name="returnItemSeqId"/>
                <select-field field-name="quantityAccepted"/>
            </entity-find>
            <set field="receiptSummaryMap" from="[:]"/>
            <iterate list="receiptList" entry="receipt"><script>addToBigDecimalInMap(
                    [returnId:receipt.returnId, returnItemSeqId:receipt.returnItemSeqId], receipt.quantityAccepted, receiptSummaryMap)</script></iterate>
            <iterate list="receiptSummaryMap" entry="quantityAccepted" key="idMap">
                <service-call name="mantle.order.ReturnServices.receive#ReturnItem" in-map="[returnId:idMap.returnId,
                        returnItemSeqId:idMap.returnItemSeqId, receivedQuantity:quantityAccepted]"/>
            </iterate>

        </actions>
    </service>
    <service verb="receive" noun="ReturnWithoutShipment">
        <description>Cancel the return shipment if there is one, mark all return items as received, and process return item responses.</description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
        </in-parameters>
        <actions>
            <!-- find and cancel return shipment -->
            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                <econdition field-name="returnId"/></entity-find>
            <set field="shipmentIdSet" from="new TreeSet(shipmentItemSourceList*.shipmentId)"/>
            <iterate list="shipmentIdSet" entry="shipmentId">
                <service-call name="mantle.shipment.ShipmentServices.cancel#Shipment"
                        in-map="[shipmentId:shipmentId, undoIssueReceive:false]"/>
                <message>Canceled return shipment ${shipmentId}</message>
            </iterate>

            <!-- receive all items -->
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList" for-update="true">
                <econdition field-name="returnId"/></entity-find>
            <iterate list="returnItemList" entry="returnItem">
                <if condition="!(returnItem.statusId in ['ReturnApproved', 'ReturnShipped'])"><continue/></if>
                <service-call name="mantle.order.ReturnServices.receive#ReturnItem" out-map="context" in-map="[returnId:returnId,
                    returnItemSeqId:returnItem.returnItemSeqId, receivedQuantity:(returnItem.returnQuantity - (returnItem.receivedQuantity ?: 0.0))]"/>
            </iterate>

            <!-- process item responses -->
            <service-call name="mantle.order.ReturnServices.process#ReturnItemResponses" in-map="[returnId:returnId]"/>
        </actions>
    </service>
    <service verb="receive" noun="ReturnItem">
        <description>Called per item when return Shipment received</description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="returnItemSeqId" required="true"/>
            <parameter name="receivedQuantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnItem" value-field="returnItem"/>

            <if condition="returnItem.receivedQuantity">
                <set field="receivedQuantity" from="receivedQuantity + returnItem.receivedQuantity"/></if>
            <service-call name="update#mantle.order.return.ReturnItem" out-map="context" in-map="[returnId:returnId,
                    returnItemSeqId:returnItemSeqId, statusId:'ReturnReceived', receivedQuantity:receivedQuantity]"/>

            <!-- if all items received update header status to Received -->
            <service-call name="mantle.order.ReturnServices.checkUpdate#ReturnHeaderStatus" in-map="[returnId:returnId,
                    statusId:'ReturnReceived', itemStatusIds:['ReturnReceived', 'ReturnManResp', 'ReturnCompleted', 'ReturnCancelled']]"/>

            <!-- if returnResponseEnumId=RrspManual and not already processed, set statusId to ReturnManResp, and on header too -->
            <if condition="returnItem.returnResponseEnumId == 'RrspManual' &amp;&amp; !returnItem.responseDate">
                <service-call name="update#mantle.order.return.ReturnItem" in-map="[returnId:returnId,
                        returnItemSeqId:returnItemSeqId, statusId:'ReturnManResp']"/>
                <service-call name="mantle.order.ReturnServices.checkUpdate#ReturnHeaderStatus" in-map="[returnId:returnId,
                        statusId:'ReturnManResp', itemStatusIds:['ReturnReceived', 'ReturnManResp', 'ReturnCancelled']]"/>
            </if>

            <!-- if response already processed (responseDate set) status to ReturnCompleted, and on header too -->
            <if condition="returnItem.responseDate">
                <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                        in-map="[returnId:returnId, returnItemSeqId:returnItemSeqId]"/>
            </if>
        </actions>
    </service>
    <service verb="complete" noun="ReturnItem">
        <in-parameters><parameter name="returnId" required="true"/><parameter name="returnItemSeqId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <service-call name="update#mantle.order.return.ReturnItem" in-map="[returnId:returnId,
                    returnItemSeqId:returnItemSeqId, statusId:'ReturnCompleted']"/>
            <service-call name="mantle.order.ReturnServices.checkUpdate#ReturnHeaderStatus" in-map="[returnId:returnId,
                    statusId:'ReturnCompleted', itemStatusIds:['ReturnCompleted', 'ReturnCancelled']]"/>
        </actions>
    </service>

    <service verb="process" noun="ReturnItemResponses">
        <description>
            Process responses for items with statuses other than Created, Requested, or Cancelled.
            Called by SECA rule on ReturnHeader Approved and ReturnItem Received statuses.
            If ReturnItem.responseImmediate = 'Y' process on Approved status or later (Shipped, Received, Completed).
            If ReturnItem.responseImmediate = 'N' (or null) process on Received status or later (Completed).
            Only processes responses for items with no response already (responseDate != null).
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="returnItemSeqId"><description>If not specified try processing all items</description></parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>

            <!-- make sure customer is not an internal org, ie this is a sales return and not a purchase return -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="returnHeader.customerPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <if condition="customerOrgInternal"><return message="Cannot process return responses for supplier purchase return"/></if>

            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList" for-update="true">
                <econdition field-name="returnId"/><econdition field-name="returnItemSeqId" ignore-if-empty="true"/>
            </entity-find>
            <!-- These more complex conditions won't work with transaction cache, so filter manually after find:
                <econdition field-name="responseDate" from="null"/>
                <econditions combine="or">
                    <econdition field-name="statusId" operator="in" value="ReturnReceived,ReturnCompleted"/>
                    <econditions combine="and">
                        <econdition field-name="statusId" operator="in" value="ReturnApproved,ReturnShipped"/>
                        <econdition field-name="responseImmediate" value="Y"/>
                    </econditions>
                </econditions>

            <filter-map-list list="returnItemList" to-list="creditItemList">
                <field-map field-name="returnResponseEnumId" value="RrspCredit"/></filter-map-list>
            <filter-map-list list="returnItemList" to-list="refundItemList">
                <field-map field-name="returnResponseEnumId" value="RrspRefund"/></filter-map-list>
            <filter-map-list list="returnItemList" to-list="replaceItemList">
                <field-map field-name="returnResponseEnumId" value="RrspReplace"/></filter-map-list>
            -->

            <!-- split list into credit, refund, replace; check credit and refund items for unpaid invoices to adjust instead -->
            <set field="creditItemList" from="[]"/>
            <set field="refundItemList" from="[]"/>
            <set field="replaceItemList" from="[]"/>
            <set field="remainingAmountBySeqId" from="[:]"/>
            <iterate list="returnItemList" entry="returnItem">
                <if condition="returnItem.responseDate"><continue/></if>
                <set field="validStatus" from="returnItem.statusId in ['ReturnReceived', 'ReturnCompleted'] ||
                    (returnItem.responseImmediate == 'Y' &amp;&amp; returnItem.statusId in ['ReturnApproved', 'ReturnShipped'])"/>
                <if condition="!validStatus"><continue/></if>

                <!-- see if the invoice for returned order item is not yet paid, if so cancel/credit instead of credit or refund -->
                <if condition="returnItem.returnResponseEnumId in ['RrspCredit', 'RrspRefund']">
                    <entity-find-related-one value-field="returnItem" relationship-name="orderItem" to-value-field="orderItem"/>
                    <set field="itemQuantity" from="returnItem.receivedQuantity ?: returnItem.returnQuantity"/>
                    <set field="amountRemaining" from="returnItem.responseAmount ?: (itemQuantity ?: 0) * (orderItem?.unitAmount ?: 0)"/>
                    <if condition="!amountRemaining">
                        <message>Return Item ${returnId}:${returnItem.returnItemSeqId} has no amount, not processing credit response</message>
                        <script>remainingAmountBySeqId.put(returnItem.returnItemSeqId, 0)</script>
                        <continue/>
                    </if>

                    <entity-find entity-name="mantle.order.OrderItemBilling" list="oibList">
                        <econdition field-name="orderId" from="returnItem.orderId"/>
                        <econdition field-name="orderItemSeqId" from="returnItem.orderItemSeqId"/></entity-find>
                    <iterate list="oibList" entry="oib">
                        <set field="invoiceItem" from="oib.invoiceItem"/>
                        <set field="iiTotal" from="(oib.quantity ?: 0) * (invoiceItem.amount ?: 0)"/>
                        <if condition="iiTotal == 0"><continue/></if>
                        <set field="adjustAmount" from="amountRemaining &gt; iiTotal ? iiTotal : amountRemaining"/>

                        <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal"
                                out-map="invTotal" out-map-add-to-existing="false" in-map="[invoiceId:oib.invoiceId]"/>
                        <if condition="invTotal.unpaidTotal &gt; 0">
                            <!-- adjust by full oib/ii total if unpaidTotal is enough, otherwise just by unpaid total -->
                            <set field="adjustAmount" from="invTotal.unpaidTotal &gt; adjustAmount ? adjustAmount : invTotal.unpaidTotal"/>
                            <!-- call invoice adjust, subtract adjustAmount -->
                            <!-- TODO: more direct way to link back to return item (than new ii to parent ii to oib to oi to ri)? -->
                            <set field="adjDesc" value="Return Item ${returnId}:${returnItem.returnItemSeqId} for Order Item ${orderItem.orderId}:${orderItem.orderItemSeqId}"/>
                            <service-call name="mantle.account.InvoiceServices.adjust#Invoice"
                                    in-map="[invoiceId:oib.invoiceId, description:adjDesc, amount:adjustAmount,
                                        parentInvoiceItemSeqId:oib.invoiceItemSeqId, itemTypeEnumId:'ItemReturnAdjust']"/>
                            <!-- reduce amountRemaining -->
                            <set field="amountRemaining" from="amountRemaining - adjustAmount"/>
                            <if condition="amountRemaining == 0"><break/></if>
                        </if>
                    </iterate>

                    <!-- save the amountRemaining so if there is any credit or refund it is only that amount -->
                    <script>remainingAmountBySeqId.put(returnItem.returnItemSeqId, amountRemaining)</script>
                </if>

                <if condition="returnItem.returnResponseEnumId == 'RrspCredit'"><then>
                    <script>creditItemList.add(returnItem)</script>
                </then><else-if condition="returnItem.returnResponseEnumId == 'RrspRefund'">
                    <script>refundItemList.add(returnItem)</script>
                </else-if><else-if condition="returnItem.returnResponseEnumId == 'RrspReplace'">
                    <script>replaceItemList.add(returnItem)</script>
                </else-if></if>
            </iterate>
            <!-- <log message="Response ${returnId}:${returnItemSeqId} \n creditItemList: ${creditItemList} \n refundItemList: ${refundItemList} \n replaceItemList: ${replaceItemList}"/> -->

            <!-- Customer Credit (Financial Account Transaction); do one TX for each item -->
            <iterate list="creditItemList" entry="returnItem">
                <set field="itemAmount" from="remainingAmountBySeqId.get(returnItem.returnItemSeqId)"/>
                <if condition="itemAmount == 0"><continue/></if>

                <set field="finAccountId" from="returnHeader.finAccountId"/>
                <if condition="!finAccountId">
                    <service-call name="mantle.account.FinancialAccountServices.getOrCreate#FinancialAccount"
                            in-map="[finAccountTypeId:'CustomerCredit', ownerPartyId:returnHeader.customerPartyId,
                                organizationPartyId:returnHeader.vendorPartyId]" out-map="context"/>
                </if>
                <service-call name="mantle.account.FinancialAccountServices.deposit#FinancialAccount" out-map="context"
                        in-map="[finAccountId:finAccountId, reasonEnumId:'FatrCsCredit', amount:itemAmount]"/>
                <set field="returnItem.finAccountTransId" from="finAccountTransId"/>

                <set field="returnItem.responseAmount" from="itemAmount"/>
                <set field="returnItem.responseDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="returnItem"/>

                <if condition="returnItem.statusId == 'ReturnReceived'">
                    <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                            in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if>
            </iterate>

            <!-- Refund (Payment); consolidate for checks -->
            <if condition="refundItemList">
                <set field="checkAmount" from="0"/>
                <set field="checkItemList" from="[]"/>
                <iterate list="refundItemList" entry="returnItem">
                    <set field="itemAmount" from="remainingAmountBySeqId.get(returnItem.returnItemSeqId)"/>
                    <if condition="itemAmount == 0"><continue/></if>

                    <!-- TODO: handle CC refunds, other paymentInstrumentEnumId based on original payment method or ReturnHeader.paymentMethodId -->
                    <set field="checkAmount" from="checkAmount + itemAmount"/>
                    <script>checkItemList.add(returnItem)</script>
                    <set field="returnItem.responseAmount" from="itemAmount"/>
                    <set field="returnItem.responseDate" from="ec.user.nowTimestamp"/>
                </iterate>

                <if condition="checkAmount">
                    <!-- lookup Return Refund PaymentMethod (BankAccount) for internal org (vendor) -->
                    <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList">
                        <date-filter/><econdition field-name="ownerPartyId" from="returnHeader.vendorPartyId"/>
                        <econdition field-name="purposeEnumId" value="PmpReturnRefund"/><order-by field-name="-fromDate"/></entity-find>
                    <if condition="!paymentMethodList"><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList">
                        <date-filter/><econdition field-name="ownerPartyId" from="returnHeader.vendorPartyId"/>
                        <econdition field-name="purposeEnumId" value="PmpGeneral"/><order-by field-name="-fromDate"/></entity-find></if>
                    <if condition="paymentMethodList"><set field="paymentMethodId" from="paymentMethodList[0].paymentMethodId"/></if>

                    <service-call name="mantle.account.PaymentServices.create#Payment" out-map="context"
                        in-map="[paymentTypeEnumId:'PtRefund', statusId:'PmntPromised',
                            fromPartyId:returnHeader.vendorPartyId, toPartyId:returnHeader.customerPartyId,
                            paymentInstrumentEnumId:'PiCompanyCheck',
                            paymentMethodId:paymentMethodId, toPaymentMethodId:returnHeader.paymentMethodId,
                            amount:checkAmount, amountUomId:returnHeader.currencyUomId]"/>

                    <iterate list="checkItemList" entry="returnItem">
                        <set field="returnItem.refundPaymentId" from="paymentId"/>
                        <entity-update value-field="returnItem"/>

                        <if condition="returnItem.statusId == 'ReturnReceived'">
                            <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                                    in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if>
                    </iterate>
                </if>
            </if>

            <!-- Replace (Order); consolidate all -->
            <if condition="replaceItemList">
                <service-call name="mantle.order.OrderServices.create#Order" out-map="context"
                        in-map="[vendorPartyId:returnHeader.vendorPartyId, customerPartyId:returnHeader.customerPartyId]"/>
                
                <iterate list="replaceItemList" entry="returnItem">
                    <set field="itemQuantity" from="returnItem.receivedQuantity ?: returnItem.returnQuantity"/>

                    <service-call name="mantle.order.OrderServices.add#OrderProductQuantity"
                            in-map="[orderId:orderId, productId:returnItem.productId, quantity:itemQuantity, unitAmount:0]"/>

                    <set field="returnItem.replacementOrderId" from="orderId"/>
                    <set field="returnItem.responseDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="returnItem"/>

                    <if condition="returnItem.statusId == 'ReturnReceived'">
                        <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                                in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if>
                </iterate>

                <service-call name="mantle.order.OrderServices.set#OrderBillingShippingInfo"
                        in-map="[orderId:orderId, shippingPostalContactMechId:returnHeader.postalContactMechId,
                            shippingTelecomContactMechId:returnHeader.telecomContactMechId,
                            shippingFacilityId:returnHeader.facilityId, carrierPartyId:returnHeader.carrierPartyId,
                            shipmentMethodEnumId:returnHeader.shipmentMethodEnumId]"/>
                <!-- place and approve order, come from here ready to ship -->
                <service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:orderId]"/>
                <service-call name="mantle.order.OrderServices.approve#Order" in-map="[orderId:orderId]"/>
            </if>
        </actions>
    </service>

    <service verb="cancel" noun="Return">
        <description>Cancel items not received/sent, if all items cancelled then cancel header</description>
        <in-parameters><parameter name="returnId" required="true"/></in-parameters>
        <out-parameters><parameter name="statusId"/><parameter name="oldStatusId"/>
            <parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/></entity-find>
            <set field="allCancelled" from="true"/>
            <iterate list="returnItemList" entry="returnItem">
                <service-call name="mantle.order.ReturnServices.cancel#ReturnItem" out-map="itemOut"
                        in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/>
                <if condition="itemOut.statusId != 'ReturnCancelled'"><set field="allCancelled" from="false"/></if>
            </iterate>
            <if condition="allCancelled"><then>
                <set field="statusId" value="ReturnCancelled"/>
                <service-call name="update#mantle.order.return.ReturnHeader" out-map="context"
                        in-map="[returnId:returnId, statusId:statusId]"/>
            </then><else>
                <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>
                <set field="statusId" from="returnHeader.statusId"/>
                <set field="oldStatusId" from="returnHeader.statusId"/>
                <set field="statusChanged" from="false"/>
            </else></if>
        </actions>
    </service>
    <service verb="cancel" noun="ReturnItem">
        <description>Cancel item if not received/sent, otherwise do nothing</description>
        <in-parameters><parameter name="returnId" required="true"/><parameter name="returnItemSeqId" required="true"/></in-parameters>
        <out-parameters><parameter name="statusId"/><parameter name="oldStatusId"/>
            <parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnItem" value-field="returnItem"/>
            <if condition="returnItem.statusId in ['ReturnCreated', 'ReturnRequested', 'ReturnApproved']"><then>
                <set field="statusId" value="ReturnCancelled"/>
                <service-call name="update#mantle.order.return.ReturnItem" out-map="context"
                        in-map="[returnId:returnId, returnItemSeqId:returnItemSeqId, statusId:statusId]"/>
            </then><else>
                <set field="statusId" from="returnItem.statusId"/>
                <set field="oldStatusId" from="returnItem.statusId"/>
                <set field="statusChanged" from="false"/>
            </else></if>
        </actions>
    </service>

    <!-- ============================================== -->
    <!-- ========== Return Shipment Services ========== -->
    <!-- ============================================== -->

    <service verb="create" noun="ReturnShipment">
        <description>Create a Shipment for items on a return using settings on ReturnHeader. Called by SECA rule when
            Return is Approved.</description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="createPackage" type="Boolean" default="false"/>
            <parameter name="createRouteSegment" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>

            <!-- is this an outgoing Shipment (use ShpTpPurchaseReturn) or incoming (use ShpTpSalesReturn) order based on internal org? -->
            <!-- TODO: what to do if both are internal orgs? need a flag or something for which side we're dealing with... -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="returnHeader.customerPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <set field="shipmentTypeEnumId" from="customerOrgInternal ? 'ShpTpPurchaseReturn' : 'ShpTpSalesReturn'"/>

            <if condition="customerOrgInternal"><then>
                <set field="originFacilityId" from="returnHeader.facilityId"/>
                <set field="destPostalContactMechId" from="returnHeader.postalContactMechId"/>
                <set field="destTelecomContactMechId" from="returnHeader.telecomContactMechId"/>
            </then><else>
                <set field="destinationFacilityId" from="returnHeader.facilityId"/>
                <set field="originPostalContactMechId" from="returnHeader.postalContactMechId"/>
                <set field="originTelecomContactMechId" from="returnHeader.telecomContactMechId"/>
            </else></if>

            <!-- create Shipment record, get shipmentId -->
            <service-call name="create#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentTypeEnumId:shipmentTypeEnumId, statusId:'ShipInput',
                        fromPartyId:returnHeader.customerPartyId, toPartyId:returnHeader.vendorPartyId]"/>

            <if condition="createPackage">
                <service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="context"/>
            </if>
            <if condition="createRouteSegment">
                <set field="shipmentMethodEnumId" from="returnHeader.shipmentMethodEnumId"/>
                <set field="carrierPartyId" from="returnHeader.carrierPartyId"/>
                <service-call name="create#mantle.shipment.ShipmentRouteSegment" out-map="context" in-map="context"/>
            </if>
            <if condition="shipmentPackageSeqId &amp;&amp; shipmentRouteSegmentSeqId">
                <service-call name="create#mantle.shipment.ShipmentPackageRouteSeg"
                        in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,
                                shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/>
            </if>

            <service-call name="mantle.order.ReturnServices.add#ReturnToShipment"
                    in-map="[shipmentId:shipmentId, returnId:returnId]"/>
        </actions>
    </service>
    <service verb="add" noun="ReturnToShipment">
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="returnId"/></entity-find>
            
            <iterate list="returnItemList" entry="returnItem">
                <if condition="returnItem.productId">
                    <!-- see if Product is a physical item -->
                    <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                        <field-map field-name="productId" from="returnItem.productId"/></entity-find-one>

                    <if condition="product.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse']">
                        <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem">
                            <field-map field-name="shipmentId"/><field-map field-name="productId" from="returnItem.productId"/></entity-find-one>
                        <if condition="shipmentItem"><then>
                            <set field="shipmentItem.quantity" from="shipmentItem.quantity + returnItem.returnQuantity"/>
                            <entity-update value-field="shipmentItem"/>
                        </then><else>
                            <service-call name="create#mantle.shipment.ShipmentItem"
                                    in-map="[shipmentId:shipmentId, productId:returnItem.productId, quantity:returnItem.returnQuantity]"/>
                        </else></if>

                        <service-call name="create#mantle.shipment.ShipmentItemSource"
                                in-map="[shipmentId:shipmentId, productId:returnItem.productId, statusId:'SisPending',
                                    quantity:returnItem.returnQuantity, quantityNotHandled:returnItem.returnQuantity,
                                    returnId:returnItem.returnId, returnItemSeqId:returnItem.returnItemSeqId]"/>

                        <!-- for ReturnItemBilling set the invoiceId/invoiceItemSeqId on it -->
                        <set field="quantityNotBilled" from="returnItem.returnQuantity"/>
                        <entity-find entity-name="mantle.order.return.ReturnItemBilling" list="returnItemBillingList">
                            <econdition field-name="returnId"/><econdition field-name="returnItemSeqId" from="returnItem.returnItemSeqId"/>
                        </entity-find>
                        <iterate list="returnItemBillingList" entry="returnItemBilling">
                            <if condition="!returnItemBilling.shipmentId &amp;&amp; quantityNotBilled >= returnItemBilling.quantity">
                                <set field="returnItemBilling.shipmentId" from="shipmentId"/>
                                <entity-update value-field="returnItemBilling"/>
                                <set field="quantityNotBilled" from="quantityNotBilled - returnItemBilling.quantity"/>
                            </if>
                        </iterate>
                        <!-- if quantityNotBilled > 0 do anything here? we don't have another Invoice/Item with quantity to match... -->
                    </if>
                </if>
            </iterate>
        </actions>
    </service>

    <!-- =============================================== -->
    <!-- ========== Reroute Shipment Services ========== -->
    <!-- =============================================== -->

    <service verb="returnAndResell" noun="Shipment">
        <description>
            For use when a Shipment is rejected and sold to another customer.
            Calls return#Shipment and resell#Shipment.
            For use only with Sales shipments.
        </description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="returnReasonEnumId" required="true"/>
            <parameter name="returnResponseEnumId" required="true"/>
            <parameter name="responseImmediate" default-value="Y"/>
            <parameter name="customerPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="returnId"/>
            <parameter name="newOrderId"/>
            <parameter name="newShipmentId"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.order.ReturnServices.return#Shipment" in-map="context" out-map="context"/>
            <service-call name="mantle.order.ReturnServices.resell#Shipment" in-map="context" out-map="context"/>
            <message>Shipment ${shipmentId} returned in Return ${returnId}, resold in Order ${newOrderId} and inventory issued to Shipment ${newShipmentId}</message>
        </actions>
    </service>
    <service verb="return" noun="Shipment">
        <description>
            Create a return for entire shipment, return all items/quantities on the shipment.
            For use with Sales or Purchase shipments.
        </description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="returnReasonEnumId" required="true"/>
            <parameter name="returnResponseEnumId" required="true"/>
            <parameter name="responseImmediate"/>
        </in-parameters>
        <out-parameters>
            <parameter name="returnId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <if condition="!(shipment.shipmentTypeEnumId in ['ShpTpSales', 'ShpTpPurchase'])">
                <return error="true" message="Shipment ${shipmentId} is not a Sales or Purchase shipment"/></if>
            <if condition="!(shipment.statusId in ['ShipPacked', 'ShipShipped'])">
                <return error="true" message="Shipment ${shipmentId} is not in the Packed or Shipped status"/></if>

            <set field="vendorPartyId" from="shipment.fromPartyId"/>
            <set field="customerPartyId" from="shipment.toPartyId"/>

            <!-- get contact info from ShipmentRouteSegment -->
            <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="srsList">
                <econdition field-name="shipmentId"/></entity-find>
            <set field="srs" from="srsList[0]"/>
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="customerPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <if condition="customerOrgInternal"><then>
                <set field="facilityId" from="srs.destinationFacilityId"/>
                <set field="postalContactMechId" from="srs.originPostalContactMechId"/>
                <set field="telecomContactMechId" from="srs.originTelecomContactMechId"/>
            </then><else>
                <set field="facilityId" from="srs.originFacilityId"/>
                <set field="postalContactMechId" from="srs.destPostalContactMechId"/>
                <set field="telecomContactMechId" from="srs.destTelecomContactMechId"/>
            </else></if>

            <!-- create ReturnHeader -->
            <service-call name="mantle.order.ReturnServices.create#Return" out-map="context"
                    in-map="[vendorPartyId:vendorPartyId, customerPartyId:customerPartyId, facilityId:facilityId,
                        postalContactMechId:postalContactMechId, telecomContactMechId:telecomContactMechId]"/>

            <!-- add return items for order items from ShipmentItemSource records -->
            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="sisList">
                <econdition field-name="shipmentId"/></entity-find>
            <iterate list="sisList" entry="sis">
                <service-call name="mantle.order.ReturnServices.add#OrderItemToReturn" in-map="[returnId:returnId,
                        orderId:sis.orderId, orderItemSeqId:sis.orderItemSeqId, returnQuantity:sis.quantity,
                        returnReasonEnumId:returnReasonEnumId, returnResponseEnumId:returnResponseEnumId,
                        responseImmediate:responseImmediate]"/>
            </iterate>
        </actions>
    </service>
    <service verb="resell" noun="Shipment">
        <description>
            Create order for different customer for all items on a shipment.
            Create new shipment for new order.
            Reject original shipment and reallocate inventory to new shipment.
            Leave shipment picked, don't set to packed so invoice is not created (so order prices can be adjusted, etc).
            For use only with Sales shipments.
        </description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="customerPartyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="newOrderId"/>
            <parameter name="newShipmentId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <if condition="shipment.shipmentTypeEnumId != 'ShpTpSales'">
                <return error="true" message="Shipment ${shipmentId} is not a Sales shipment"/></if>
            <if condition="!(shipment.statusId in ['ShipPacked', 'ShipShipped'])">
                <return error="true" message="Shipment ${shipmentId} is not in the Packed or Shipped status"/></if>

            <set field="vendorPartyId" from="shipment.fromPartyId"/>

            <!-- get origin facility from ShipmentRouteSegment -->
            <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="srsList">
                <econdition field-name="shipmentId"/></entity-find>
            <set field="srs" from="srsList[0]"/>
            <set field="facilityId" from="srs.originFacilityId"/>

            <!-- NOTE: don't set postalContactMechId or telecomContactMechId, those were for the other customer -->

            <!-- create Order -->
            <service-call name="mantle.order.OrderServices.create#Order" out-map="ordOut"
                    in-map="[vendorPartyId:vendorPartyId, customerPartyId:customerPartyId, facilityId:facilityId]"/>
            <set field="newOrderId" from="ordOut.orderId"/>

            <!-- add order items for shipment items records -->
            <entity-find entity-name="mantle.shipment.ShipmentItem" list="shipmentItemList">
                <econdition field-name="shipmentId"/></entity-find>
            <iterate list="shipmentItemList" entry="shipmentItem">
                <service-call name="mantle.order.OrderServices.add#OrderProductQuantity" in-map="[orderId:newOrderId,
                        productId:shipmentItem.productId, quantity:shipmentItem.quantity]"/>
            </iterate>

            <!-- create new shipment for order -->
            <service-call name="mantle.shipment.ShipmentServices.create#OrderPartShipment"
                    in-map="[orderId:ordOut.orderId, orderPartSeqId:ordOut.orderPartSeqId]" out-map="shipOut"/>
            <set field="newShipmentId" from="shipOut.shipmentId"/>

            <!-- reject original shipment -->
            <service-call name="update#mantle.shipment.Shipment" in-map="[shipmentId:shipmentId, statusId:'ShipRejected']"/>

            <!-- reallocate inventory to new shipment -->
            <service-call name="mantle.product.AssetServices.move#IssuancesToNewShipment"
                    in-map="[shipmentId:shipmentId, newOrderId:newOrderId, newShipmentId:newShipmentId]"/>

            <!-- set shipment picked (don't set to packed until after manual order update, set prices/etc as needed) -->
            <service-call name="update#mantle.shipment.Shipment" in-map="[shipmentId:newShipmentId, statusId:'ShipPicked']"/>
        </actions>
    </service>
</services>
