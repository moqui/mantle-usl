<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<secas xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-eca-2.1.xsd">
    <!-- Invoice GL Posting -->
    <seca id="InvoiceGlPost" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; (statusId == 'InvoiceFinalized' || statusId == 'InvoiceApproved')</expression></condition>
        <actions><service-call name="mantle.ledger.InvoiceAutoPostServices.post#Invoice" in-map="context"/></actions>
    </seca>
    <!-- Invoice Adjustment GL Posting -->
    <seca id="InvoiceAdjustGlPost" service="mantle.account.InvoiceServices.adjust#Invoice" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.ledger.InvoiceAutoPostServices.post#InvoiceAdjustment" in-map="context"/></actions>
    </seca>
    <!-- Cancel invoice revert TX -->
    <seca id="InvoiceCancelRevertGlPost" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; statusId == 'InvoiceCancelled'</expression></condition>
        <actions><service-call name="mantle.ledger.InvoiceAutoPostServices.revert#InvoicePost" in-map="context"/></actions>
    </seca>
    <!-- Outgoing and Incoming invoice resume changes revert TX -->
    <seca id="InvoiceResumeChangeRevertGlPost" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; (
            (oldStatusId in ['InvoiceFinalized', 'InvoiceSent'] &amp;&amp; statusId == 'InvoiceInProcess') ||
            (oldStatusId == 'InvoiceApproved' &amp;&amp; statusId == 'InvoiceReceived'))</expression></condition>
        <actions><service-call name="mantle.ledger.InvoiceAutoPostServices.revert#InvoicePost" in-map="context"/></actions>
    </seca>

    <!-- Payment GL Posting -->
    <seca id="PaymentGlPost" service="update#mantle.account.payment.Payment" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; statusId == 'PmntDelivered' &amp;&amp; oldStatusId != 'PmntConfirmed'</expression></condition>
        <actions><service-call name="mantle.ledger.PaymentAutoPostServices.post#Payment" in-map="context"/></actions>
    </seca>
    <!-- Payment Cancel, Void, Refund revert TX -->
    <seca id="PaymentCancelRevertGlPost" service="update#mantle.account.payment.Payment" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; (statusId in ['PmntCancelled', 'PmntVoid'])</expression></condition>
        <actions><service-call name="mantle.ledger.PaymentAutoPostServices.revert#PaymentPost" in-map="context"/></actions>
    </seca>
    <!-- Payment Undeliver (PmntDelivered => PmntPromised) revert TX -->
    <seca id="PaymentUndeliverReverGlPost" service="update#mantle.account.payment.Payment" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; oldStatusId == 'PmntDelivered' &amp;&amp; statusId in ['PmntPromised', 'PmntAuthorized']</expression></condition>
        <actions><service-call name="mantle.ledger.PaymentAutoPostServices.revert#PaymentPost" in-map="context"/></actions>
    </seca>
    <!-- Payment Application GL Posting -->
    <seca id="PaymentApplicationGlPost" service="create#mantle.account.payment.PaymentApplication" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.ledger.PaymentAutoPostServices.post#PaymentApplication" in-map="context"/></actions>
    </seca>
    <seca id="PaymentApplicationRevertGlPost" service="update#mantle.account.payment.PaymentApplication" when="post-service" run-on-error="false">
        <condition><expression>amountApplied == 0.0</expression></condition>
        <actions><service-call name="mantle.ledger.PaymentAutoPostServices.revert#PaymentApplicationPost" in-map="context"/></actions>
    </seca>

    <!-- Asset Receipt GL Posting -->
    <seca id="AssetReceiptGlPost" service="create#mantle.product.receipt.AssetReceipt" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.ledger.AssetAutoPostServices.post#AssetReceipt" in-map="context"/></actions>
    </seca>
    <!-- Asset Issuance GL Posting -->
    <seca id="AssetIssuanceGlPost" service="create#mantle.product.issuance.AssetIssuance" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.ledger.AssetAutoPostServices.post#AssetIssuance" in-map="context"/></actions>
    </seca>
    <seca id="AssetIssuanceGlRePost" service="update#mantle.product.issuance.AssetIssuance" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.ledger.AssetAutoPostServices.repost#AssetIssuance" in-map="context"/></actions>
    </seca>
    <!-- Old approach, now handled on update (set quantity to zero for cancel, see AssetServices.cancel#AssetIssuance)
    <seca service="mantle.product.AssetServices.cancel#AssetIssuance" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.ledger.AssetAutoPostServices.revert#AssetIssuanceOnCancel" in-map="context"/></actions>
    </seca> -->
    <!-- Asset Physical Inventory Variance GL Posting -->
    <seca id="AssetDetailPhysicalVarianceGlPost" service="create#mantle.product.asset.AssetDetail" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.ledger.AssetAutoPostServices.post#PhysicalInventoryVariance" in-map="context"/></actions>
    </seca>

    <!-- FinancialAccountTrans GL Posting -->
    <seca id="FinancialAccountTransGlPost" service="create#mantle.account.financial.FinancialAccountTrans" when="post-service">
        <!-- FinancialAccountTrans is create-only so only trigger on create -->
        <actions><service-call name="mantle.ledger.OtherAutoPostServices.post#FinancialAccountTrans" in-map="context"/></actions>
    </seca>
</secas>
