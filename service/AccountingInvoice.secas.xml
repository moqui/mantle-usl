<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<secas xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-eca-2.1.xsd">
    <!-- Create sales invoice on Outgoing Shipment Packed -->
    <seca id="ShipmentOutgoingPackedCreateInvoices" service="update#mantle.shipment.Shipment" when="post-service">
        <condition><expression>statusChanged &amp;&amp; statusId == 'ShipPacked' &amp;&amp; !(oldStatusId in ['ShipShipped', 'ShipDelivered'])</expression></condition>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <set field="shipmentTypeEnum" from="shipment.'ShipmentType#moqui.basic.Enumeration'"/>
            <if condition="shipmentTypeEnum?.enumId == 'ShpTpOutgoing' || shipmentTypeEnum?.parentEnumId == 'ShpTpOutgoing'">
                <service-call name="mantle.account.InvoiceServices.create#SalesShipmentInvoices" in-map="[shipmentId:shipmentId]"/></if>
        </actions>
    </seca>
    <!-- Create purchase invoice on Incoming Shipment Delivered -->
    <seca id="ShipmentIncomingDeliveredCreateInvoices" service="update#mantle.shipment.Shipment" when="post-service">
        <condition><expression>statusChanged &amp;&amp; statusId == 'ShipDelivered'</expression></condition>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <set field="shipmentTypeEnum" from="shipment.'ShipmentType#moqui.basic.Enumeration'"/>
            <if condition="shipmentTypeEnum?.enumId == 'ShpTpIncoming' || shipmentTypeEnum?.parentEnumId == 'ShpTpIncoming'">
                <service-call name="mantle.account.InvoiceServices.create#PurchaseShipmentInvoices" in-map="[shipmentId:shipmentId]"/></if>
        </actions>
    </seca>

    <!-- Invoice Validation: Finalized or Approved if invoiceTotal is less than zero -->
    <seca id="InvoiceCheckNegativeTotal" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false" priority="2">
        <condition><expression>statusChanged &amp;&amp; (statusId == 'InvoiceFinalized' || statusId == 'InvoiceApproved')</expression></condition>
        <actions><if condition="invoiceTotal == null || invoiceTotal &lt; 0.0">
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="totalOut"/>
            <if condition="totalOut.invoiceTotal &lt; 0.0"><return error="true" message="Invoice total cannot be negative (less than zero)"/></if>
        </if></actions>
    </seca>
    <!-- On Invoice Finalized to Payment Received or Approved to Payment Sent make sure is actually fully paid -->
    <seca id="InvoiceCheckFullyPaid" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false" priority="2">
        <condition><expression>statusChanged &amp;&amp; statusId in ['InvoicePmtRecvd', 'InvoicePmtSent']</expression></condition>
        <!-- NOTE: could restrict more but best to cover all possible transitions: oldStatusId in ['InvoiceFinalized', 'InvoiceApproved'] &amp;&amp; -->
        <actions>
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="totalOut"/>
            <if condition="totalOut.unpaidTotal &gt; 0.0"><return error="true" message="Invoice not fully paid"/></if>
        </actions>
    </seca>

    <!-- On Invoice Finalized or Approved look for matching Payment by forInvoiceId and auto apply -->
    <seca id="InvoiceApplyForPayments" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false" priority="3">
        <condition><expression>statusChanged &amp;&amp; (statusId == 'InvoiceFinalized' || statusId == 'InvoiceApproved')</expression></condition>
        <actions><service-call name="mantle.account.PaymentServices.apply#InvoiceForPayments" in-map="context"/></actions>
    </seca>

    <!-- Un-apply Payments, etc on Cancelled -->
    <seca id="InvoiceCancelledCleanup" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; statusId == 'InvoiceCancelled'</expression></condition>
        <actions><service-call name="mantle.account.InvoiceServices.cancel#Invoice" in-map="context"/></actions>
    </seca>
    <!-- Un-apply Payments, etc on Unpay -->
    <seca id="InvoiceUnPayByStatus" service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; oldStatusId in ['InvoicePmtRecvd', 'InvoicePmtSent'] &amp;&amp;
            statusId in ['InvoiceFinalized', 'InvoiceApproved']</expression></condition>
        <actions><service-call name="mantle.account.InvoiceServices.unpay#Invoice" in-map="context"/></actions>
    </seca>

    <!-- Invoice Notices -->
    <seca id="InvoiceFinalizedSendEmail" service="update#mantle.account.invoice.Invoice" when="tx-commit">
        <condition><expression>statusChanged &amp;&amp; statusId == 'InvoiceFinalized' &amp;&amp; oldStatusId == 'InvoiceInProcess'</expression></condition>
        <actions><service-call name="mantle.account.InvoiceServices.send#InvoiceStoreEmail"
                in-map="[invoiceId:invoiceId, emailTypeEnumId:'PsetInvoiceFinalized']"/></actions>
    </seca>
</secas>
